
 ====================================================================
copper, intel compiler below


prerequisite wannier
--------------------

The build procedure for this code is very crude.

Wannier90 2.0.0

http://wannier.org

module unload cray-libsci/12.1.3
module swap PrgEnv-pgi/4.2.34 PrgEnv-intel/4.2.34 
module load cray-libsci/12.1.3
module load fftw/3.3.0.4
module unload hdf5/1.8.11
module load netcdf/4.3.0
module load cray-hdf5/1.8.11

export F77=ftn
export F90=ftn
export FC=ftn
export CC=cc
export CXX=CC

export COMMS=mpi
export F90=ftn
export MPIF90=ftn
export FCOPTS="-O2 -DEXIT_FLAG -I${CRAY_LIBSCI_PREFIX_DIR}/include"
export LDOPTS="-O2 -DEXIT_FLAG -L${CRAY_LIBSCI_PREFIX_DIR}/lib -lsci_intel"

cp config/make.sys.g95 make.sys

Edit make.sys

COMMS=mpi
F90=ftn
MPIF90=ftn
FCOPTS=-O2 -DEXIT_FLAG -I${CRAY_LIBSCI_PREFIX_DIR}/include
LDOPTS=-O2 -DEXIT_FLAG -L${CRAY_LIBSCI_PREFIX_DIR}/lib -lsci_intel
LIBDIR=-L${CRAY_LIBSCI_PREFIX_DIR}/lib
LIBS=-lsci_intel

make
make lib
make w90vdw

export WANNIER_PREFIX=/usr/local/usp/abinit/wannier90-2.0.0-intel
mkdir ${WANNIER_PREFIX}/bin
cp wannier90.x postw90.x ${WANNIER_PREFIX}/bin/
cp -R doc ${WANNIER_PREFIX}/
cp -R examples ${WANNIER_PREFIX}/
mkdir ${WANNIER_PREFIX}/lib
cp libwannier.a ${WANNIER_PREFIX}/lib/
cp ./utility/w90vdw/w90vdw.x ${WANNIER_PREFIX}/bin/

prerequisite libxc
------------------

Source
http://www.tddft.org/programs/octopus/wiki/index.php/Libxc
wget http://www.tddft.org/programs/octopus/down.php?file=libxc/libxc-2.2.0.tar.gz
wget http://www.tddft.org/programs/octopus/down.php?file=libxc/libxc-2.0.3.tar.gz

module unload cray-libsci/12.1.3
module swap PrgEnv-pgi/4.2.34 PrgEnv-intel/4.2.34 
module load cray-libsci/12.1.3
module load fftw/3.3.0.4
module unload hdf5/1.8.11
module load netcdf/4.3.0
module load cray-hdf5/1.8.11

export F77=ftn
export F90=ftn
export FC=ftn
export CC=cc
export CXX=CC

# First build used most recent libxc however
# abinit configuration script looks for minor version 0.
# Both builds are shown because version 2.2.x may be
# useful in the future.

export LIBXC_PREFIX=<choose your subdirectory>/libxc-2.2.0-intel
# Assume tar gzipped file is in ${LIBXC_PREFIX}/src and
# has been extraced  with tar xzf.
cd ${LIBXC_PREFIX}/src/libxc-2.2.0

# Second attempt for sake of abinit.
export LIBXC_PREFIX=<choose your subdirectory>/libxc-2.0.3-intel
# Assume tar gzipped file is in ${LIBXC_PREFIX}/src and
# has been extraced  with tar xzf.
cd ${LIBXC_PREFIX}/src/libxc-2.0.3

./configure --prefix=$LIBXC_PREFIX \
  --enable-shared  --enable-static

For version 2.0.3
vi src/Makefile
change all F77 to FC, that is, change to --tag=FC

make

For version 2.0.3
only testsuite/Makefile needed to be changed

error message:
libtool: link: cc -g -O2 -o .libs/xc-info xc-info.o  -lm ./.libs/libxc.so -Wl,-rpath -Wl,/u/scheinin/ABINIT/libxc-2.2.0-intel/lib
ld: attempted static link of dynamic object `./.libs/libxc.so'

cd src
vi Makefile
add "-static" to xc_info_LINK around line 240

xc_info_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
        $(LIBTOOLFLAGS) --mode=link $(CCLD) -static $(AM_CFLAGS) $(CFLAGS) \
        $(xc_info_LDFLAGS) $(LDFLAGS) -o $@
cd ..

make

error message:
libtool: link: cc -g -O2 -o .libs/xc-get_data xc_get_data-xc-get_data.o  -L../src/ /u/scheinin/ABINIT/libxc-2.2.0-intel/src/libxc-2.2.0/src/.libs/libxc.so -lm -Wl,-rpath -Wl,/u/scheinin/ABINIT/libxc-2.2.0-intel/lib
ld: attempted static link of dynamic object `/u/scheinin/ABINIT/libxc-2.2.0-intel/src/libxc-2.2.0/src/.libs/libxc.so'

cd testsuite
vi Makefile
add "-static" around line 149
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
        $(LIBTOOLFLAGS) --mode=link $(CCLD) -static $(AM_CFLAGS) $(CFLAGS) \
        $(AM_LDFLAGS) $(LDFLAGS) -o $@
cd ..

make

For version 2.0.3,
make check failed.

make check
make install

$LIBXC_PREFIX/lib
should now have both static and dynamic libraries


abinit
------

export ABINIT_PREFIX=<choose your subdirectory>/abinit-7.6.2-intel
export MPI_RUNNER=aprun
export FCFLAGS_OPENMP="-openmp"
export CFLAGS_EXTRA="-openmp"

# Assume tar gzipped file is in ${ABINIT_PREFIX}/src and
# has been extraced with tar xzf.
cd ${ABINIT_PREFIX}/src/abinit-7.6.2
export FCFLAGS_EXTRA="-module ${PWD}/src/mods"

# Note, in the end, no wannier90
# Notice some libraries are specific to Intel
./configure --prefix=$ABINIT_PREFIX \
--enable-64bit-flags="yes" \
--with-linalg-flavor="custom+scalapack" \
--with-linalg-incs="-I${CRAY_LIBSCI_PREFIX_DIR}/include" \
--with-linalg-libs="-L${CRAY_LIBSCI_PREFIX_DIR}/lib -lsci_intel" \
--with-fft-flavor="fftw3" \
--with-fft-incs="-I$FFTW_INC" \
--with-fft-libs="-L$F{FTW_DIR} -lfftw3" \
--enable-netcdf=yes \
--with-netcdf-incs="-I${NETCDF_DIR}/include" \
--with-netcdf-libs="-L${NETCDF_DIR}/lib  -lnetcdff_intel -lnetcdf_intel" \
--enable-libxc=yes \
--with-dft-flavor="libxc" \
--with-libxc-incs="-I${LIBXC_PREFIX}/include" \
--with-libxc-libs="-L${LIBXC_PREFIX}/lib -lxc" \
--with-wannier90="${WANNIER_PREFIX}/bin/wannier90.x" \
--with-wannier90-libs="-L${WANNIER_PREFIX}/lib -lwannier" \
--enable-optim="standard" \
--enable-mpi=yes --enable-mpi-io=yes \
--with-mpi-incs="-I${CRAY_MPICH2_DIR}/include" \
--with-mpi-libs="-L${CRAY_MPICH2_DIR}/lib -lfmpich_intel -lmpichf90_intel -lmpich_intel"

# For libxc version 2.2.0 used
# --with-libxc-libs="-L${LIBXC_PREFIX}/lib -lxcf90 -lxc" \
# but for libxc 2.0.3, libxc.a/libxc.so also has the Fortran routines.

When using libxc 2.2.0 the error was
checking whether LibXC has Fortran support... yes
checking whether this is LibXC version 2.0... no
Connector detection failure
config.log showed   
         if ( (major != 2) || (minor != 0) ) {
whereas I built libxc-2.2.0-intel

Wannier was not enabled.  I hope it can be ignored.

version libxc 2.2.0:
Configure decided
 OpenMP enabled  : no
 test LibXC     : yes
 test Wannier90 : no
Moreover, internally configure is rerun and it was rerun with
--enable-netcdf=no
--enable-libxc=no , which seems contradictory

make 2>&1 | tee make.log

make install

# Need to change permissions.

topdir=/usr/local/usp/abinit

cd $topdir
chmod ugo+xr $topdir
chown cots.staff $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *
# In each src/ directory
chmod -R o-rwx *
cd $topdir
chown -R cots.staff *

# Make sure last minute changes such as the README file are readable.



Go to here on Friday  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
There is a
/usr/local/usp/abinit/abinit-7.6.2-intel/share/abinit-test/
a copy of which might be useful for testing.

qsub -l walltime=0:30:00 -l select=2:ncpus=32:mpiprocs=32 -A ERDCS97290STA -I -q standard

runtests.py always fails because it cannot find "tests"

To do on an interactive batch node.

cd tests
source tests.env  # defines MPI_RUNNER

cd ../tmp/tests

 ../../tests/runtests.py 

Everything fails.
shows command
/lustre/usr/local/u/scheinin/ABINIT/abinit-7.6.2-intel/src/abinit-7.6.2/src/98_main/abinit < /lustre/usr/local/u/scheinin/ABINIT/abinit-7.6.2-intel/src/abinit-7.6.2/tmp/tests/Test_suite/paral_t05_MPI1/t05_MPI1.stdin > /lustre/usr/local/u/scheinin/ABINIT/abinit-7.6.2-intel/src/abinit-7.6.2/tmp/tests/Test_suite/paral_t05_MPI1/t05_MPI1.stdout 2> /lustre/usr/local/u/scheinin/ABINIT/abinit-7.6.2-intel/src/abinit-7.6.2/tmp/tests/Test_suite/paral_t05_MPI1/t05_MPI1.stderr
Try instead
aprun above command
 Checks for existence of file  t05.in  and then fails, see *.stderr

Tests failed in a grand variety of ways.

make testin_1
make tests_in

==============================================================================
Use the script  runtests.py  for a flexible use of the test suite.
To get help, issue                   ./runtests.py --help | more

To run the new test suite inside a tmp directory (e.g. ~abinit/tmp/tests) :
../../tests/runtests.py
this will create a directory tmp/tests/Test_suite
Useful option when using manually the test suite : "-t0"
   (which disable the timeout routine)

Keywords to use with the make command for test directory (automated sets of tests) :

check_local    Standard set of tests, used on the test farm slaves
tests_abirules Launch the abirules tests
               (Warning : for some of the tests, the file make.log
                must be present in the top directory. This means one has
                to compile with the command   make > make.log 2>&1 )
tests_buildsys Launch the buildsys tests
tests_in       Launch several small tests (3 mandatory ones, for basic 
               capabilities of ABINIT, and 4 optional, to test
               bigdft, etsf_io, libxc, wannier90, if they are installed)

One should check whether the following keywords still work :
benchabinit
tests_bench    Test accuracy+cpu for benchmarks (with a report)
tests_speed    Test cpu for benchmarks (quick, with a report)

To add a new test, see 
http://www.abinit.org/developers/dev-environment/buildbot/howto-add-a-new-test-in-the-test-suite



==============================================================================

------------------------------------------------------------
Below, some notes, only partial, about compiling with PGI.

http://www.abinit.org/abinit/downloads/source-packages
http://www.abinit.org/downloads/plug-in-sources

export F77=ftn
export FFLAGS="-O2"
export F90=ftn
export F90FLAGS="-O2"
export FC=ftn
export FCFLAGS="-O2  -I../01_interfaces_ext -I../10_defs"
export CPPFLAGS="-DpgiFortran  -I../01_interfaces_ext -I../10_defs"
export CC=cc
export CFLAGS="-O2"
export CXX=CC
export CXXFLAGS="-O2"

module load xt-libsci/10.4.9
module load fftw/3.2.2.1
module load netcdf/4.1.1.0

# Need modify configure to eliminate all reference to -lblacs -lscalapack
 cp abinit_configure abinit-6.4.3/configure

./configure -prefix=/u/scheinin/abinit \
--enable-64bit-flags \
--enable-all-plugins \
--enable-scalapack \
--enable-mpi --enable-mpi-io \
--enable-fft --with-fft-libs="-lfftw3 -lfftw3f" \
--with-plugins-tardir=/u/scheinin/abinit/src/tarballs6.4  2>&1 | tee fig.log

If compiling of cfortran.h gives an error message, then in file
plugins/netcdf/netcdf-3.6.3/fortran/cfortran.h
on line 77, add
#define pgiFortran
It seems that the netcdf plugin ignores the setting of CPPFLAGS

The Makefile files of various subdirectories do not include the
directories that have modules needed for compilation.
The FCFLAGS show above are not enough.  There are many subdirectories
42_geomoptim          61_ionetcdf      72_response
42_nlstrain           62_cg_noabirule  77_ddb
01_gsl_ext            42_parser             62_iowfdenpot    77_lwf
01_interfaces_ext     43_ptgroups           62_occeig        77_suscep
01_macroavnew_ext     45_psp_parser         62_poisson       79_seqpar_mpi
01_qespresso_ext      47_xml                62_wvl_wfs       83_cut3d
02_clib               49_gw_toolbox_oop     63_bader         93_rdm
10_defs               50_abitypes_defs      64_atompaw       95_drive

and others.  The Makefile files for the higher numbered directories
do not have -I for the *.mod files for the lower numbered directories.
So time and time again the compilation fails.

Need to have an module like Intel -module <dir>

make 2>&1 | tee make.log
make check 2>&1 | tee check.log

Above , some notes, only partial, about compiling with PGI.
------------------------------------------------------------
/usr/local/usp/PETtools/CE/pkgs/ptoolsrte-0.7/packages/cmake-2.8.11

