In the year 2011 is was shown that the Cray Fortran compiler
ignores the #define macro.  The problem might have been fixed
since then.

The Cray Fortran Reference Manual (S-3901-70) on page 121 says:

5.2.2 #define Directive
   The #define directive lets you declare a variable and assign a value
   to the variable.  It also allows you to define a function-like macro.
   This directive has the following format:
   #define identifier value

The above is not reflected in the actual behavior of the Cray
Fortran compiler.  The problem was manifest when compiling the
package hycom.  I then wrote the following test program.

      program experiment01
#if defined(III)
      integer j
#else
      integer k
#endif
#define NUMBER 4
      integer i
      i = NUMBER
      write(*,*) i
      stop
      end

s> ftn -V
/opt/cray/xt-asyncpe/2.0/bin/ftn: INFO: native target is being used
Cray Fortran : Version 7.0.2  Fri Jun 05, 2009  08:48:38

The option "-eP" writes the preprocessing into a file.

> ftn -eP -c experiment01.F
> cat experiment01.i
# 1 "experiment01.F"
      program experiment01



# 5
      integer k


# 8
      integer i
      i = NUMBER
      write(*,*) i
      stop
      end

> ftn -eP -DIII -c experiment01.F
> cat experiment01.i
# 1 "experiment01.F"
      program experiment01

# 3
      integer j




# 8
      integer i
      i = NUMBER
      write(*,*) i
      stop
      end

> cpp -E -DIII experiment01.F
# 1 "experiment01.F"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "experiment01.F"
      program experiment01

      integer j




      integer i
      i = 4
      write(*,*) i
      stop
      end

The use (and not using) -DIII is intended to demonstrate that
some preprocessing is being done by the Cray Fortran compiler.

Conclusion. The result of cpp -E shows the expected behavior,
that NUMBER is substituted.  In contrast, the Cray Fortran
compiler ignores the #define statement.
