#!/bin/csh

# Use a one-node interactive batch job
# qsub -I -q standard -l select=1:ncpus=36:mpiprocs=36 -l walltime=24:00:00 -N build_gcc -A ERDCS97290STA

module swap compiler/intel compiler/gcc/5.3.0
module swap mpi/sgimpt mpi/sgimpt/2.14
module list

set path=(. ~ ~/bin $path)

setenv CC gcc
setenv CXX g++
setenv F77 gfortran
setenv F90 gfortran

setenv CFLAGS "-I${HOME}/include"
setenv LDFLAGS "-L${HOME}/lib64 -L${HOME}/lib"
setenv LD_LIBRARY_PATH "${HOME}/lib64:${HOME}/lib:${LD_LIBRARY_PATH}"
setenv LIBRARY_PATH "${HOME}/lib64:${HOME}/lib"
setenv MODULEPATH "${MODULEPATH}:${HOME}/modulefiles"
setenv PKG_CONFIG_PATH "${HOME}/lib/pkgconfig"

echo " "
echo "************"
echo "Building GMP"
echo "************"
echo " "

# Fetch from ftp://ftp.gnu.org/gnu/gmp/    gmp-6.1.0.tar.bz2
#    or from ftp://gcc.gnu.org/pub/gcc/infrastructure/    gmp-6.1.0.tar.bz2


echo " "
echo "**************"
echo "GMP: configure"
echo "**************"
echo " "

cd gmp-6.1.0
./configure --prefix=${HOME} --enable-cxx --enable-shared --enable-static

echo " "
echo "*********"
echo "GMP: make"
echo "*********"
echo " "

make

echo " "
echo "***************"
echo "GMP: make check"
echo "***************"
echo " "

make check

echo " "
echo "*****************"
echo "GMP: make install"
echo "*****************"
echo " "

make install
cd ..

echo " "
echo "*************"
echo "Building MPFR"
echo "*************"
echo " "

# Fetch from ftp://ftp.gnu.org/gnu/mpfr/    mpfr-3.1.4.tar.gz
#    or from ftp://gcc.gnu.org/pub/gcc/infrastructure/    mpfr-3.1.4.tar.bz2


echo " "
echo "***************"
echo "MPFR: configure"
echo "***************"
echo " "

cd mpfr-3.1.4
./configure --prefix=${HOME} --with-gmp=${HOME} --enable-shared --enable-static

echo " "
echo "**********"
echo "MPFR: make"
echo "**********"
echo " "

make

echo " "
echo "****************"
echo "MPFR: make check"
echo "****************"
echo " "

make check

echo " "
echo "******************"
echo "MPFR: make install"
echo "******************"
echo " "

make install
cd ..

echo " "
echo "************"
echo "Building MPC"
echo "************"
echo " "

# Fetch from ftp://ftp.gnu.org/gnu/mpc/    mpc-1.0.3.tar.gz
#    or from ftp://gcc.gnu.org/pub/gcc/infrastructure/      mpc-1.0.3.tar.gz


echo " "
echo "**************"
echo "MPC: configure"
echo "**************"
echo " "

cd mpc-1.0.3
./configure --prefix=${HOME} --with-gmp=${HOME} --with-mpfr=${HOME} --enable-shared --enable-static

echo " "
echo "*********"
echo "MPC: make"
echo "*********"
echo " "

make

echo " "
echo "***************"
echo "MPC: make check"
echo "***************"
echo " "

make check

echo " "
echo "*****************"
echo "MPC: make install"
echo "*****************"
echo " "

make install
cd ..

echo " "
echo "************"
echo "Building ISL"
echo "************"
echo " "

# Fetch from http://isl.gforge.inria.fr/    isl-0.17.1.tar.gz


echo " "
echo "**************"
echo "ISL: configure"
echo "**************"
echo " "

cd isl-0.17.1
./configure --prefix=${HOME} --with-gmp=${HOME} --enable-shared --enable-static

echo " "
echo "*********"
echo "ISL: make"
echo "*********"
echo " "

make

echo " "
echo "***************"
echo "ISL: make check"
echo "***************"
echo " "

make check

echo " "
echo "*****************"
echo "ISL: make install"
echo "*****************"
echo " "

make install
cd ..


#
#   Prerequisites to GCC's "make check" command are below.  Install them now.
#
#    binutils-2.26          ftp://ftp.gnu.org/gnu/binutils/
#    Tcl/Tk                 www.activestate.com/activetcl/ActiveTcl8.6.4.1.299124-linux-x86_64-threaded.tar   
#    expect5.45             https://sourceforge.net/projects/expect/?source=typ_redirect
#    m4-1.4.17              http://ftp.gnu.org/gnu/m4/  
#    bison-3.0.4            http://ftp.gnu.org/gnu/bison/
#    flex-2.6.0             https://sourceforge.net/projects/flex/files/
#    gawk-4.1.3             http://ftp.gnu.org/gnu/gawk/
#    libunistring-0.9.6     ftp://ftp.gnu.org/gnu/libunistring/
#    dejagnu-1.6            ftp://ftp.gnu.org/gnu/dejagnu/
#    libffi-3.2.1           https://sourceware.org/libffi/
#    libatomic_ops-7.4.2    https://github.com/ivmai/libatomic_ops/wiki/Download
#    gc-7.4.2               http://www.hboehm.info/gc/gc_source/
#    guile-2.0.11           ftp://ftp.gnu.org/gnu/guile/
#    autogen-5.18.10        http://ftp.gnu.org/gnu/autogen/rel5.18.10/
#
#   binutils
#      cd binutils-2.26
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#      make install
#      cd ..
#
#   Tcl/Tk
#      cd ActiveTcl8.6.4.1.299124-linux-x86_64-threaded
#      ./install.sh
#         [RET]
#         A   (accept license)
#         /p/home/oppe
#         /p/home/oppe
#         [RET]
#         [RET]
#         Finish >> [RET]
#      cd ..
#
#   expect
#      cd expect5.45
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make test
#         all.tcl:	Total	29	Passed	29	Skipped	0	Failed	0
#      make install
#      cd ..
#
#   m4
#      cd m4-1.4.17
#      ./configure --prefix=${HOME}
#      make
#      make check
#         ============================================================================
#         Testsuite summary for GNU M4 1.4.17
#         ============================================================================
#         # TOTAL: 163
#         # PASS:  151
#         # SKIP:  11
#         # XFAIL: 0
#         # FAIL:  1
#         # XPASS: 0
#         # ERROR: 0
#         ============================================================================
#         See tests/test-suite.log
#         Please report to bug-m4@gnu.org
#         ============================================================================
#      make install
#      cd ..
#
#   bison
#      cd bison-3.0.4
#      ./configure --prefix=${HOME}
#      make
#      make check
#         All 493 tests were successful.
#      make install
#      cd ..
#
#   flex
#      cd flex-2.6.0
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#         ============================================================================
#         Testsuite summary for the fast lexical analyser generator 2.6.0
#         ============================================================================
#         # TOTAL: 114
#         # PASS:  114
#         # SKIP:  0
#         # XFAIL: 0
#         # FAIL:  0
#         # XPASS: 0
#         # ERROR: 0
#         ============================================================================
#      make install
#      cd ..
#
#   gawk
#      cd gawk-4.1.3
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#          ALL TESTS PASSED
#      make install
#      cd ..
#
#   libunistring
#      cd libunistring-0.9.6
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#         ============================================================================
#         Testsuite summary for 
#         ============================================================================
#         # TOTAL: 495
#         # PASS:  485
#         # SKIP:  10
#         # XFAIL: 0
#         # FAIL:  0
#         # XPASS: 0
#         # ERROR: 0
#         ============================================================================
#      make install
#      cd ..
#
#   dejagnu
#      cd dejagnu-1.6
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#      make install
#      cd ..
#
#   libffi
#      cd libffi-3.2.1
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#          # of expected passes		1870
#      make install
#      cd ..
#
#   libatomic_opts
#      cd libatomic_ops-7.4.2
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#         ============================================================================
#         Testsuite summary for libatomic_ops 7.4.2
#         ============================================================================
#         # TOTAL: 4
#         # PASS:  4
#         # SKIP:  0
#         # XFAIL: 0
#         # FAIL:  0
#         # XPASS: 0
#         # ERROR: 0
#         ============================================================================
#      make install
#      cd ..
#
#   gc
#      cd gc-7.4.2
#      ln -s ${HOME}/libatomic_ops-7.4.2 libatomic_ops
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#         FAIL: threadkey_test
#         but run "make check" again and it will pass
#      make check
#         ============================================================================
#         Testsuite summary for gc 7.4.2
#         ============================================================================
#         # TOTAL: 14
#         # PASS:  14
#         # SKIP:  0
#         # XFAIL: 0
#         # FAIL:  0
#         # XPASS: 0
#         # ERROR: 0
#         ============================================================================
#      make install
#      cd ..
#
#   guile
#      cd guile-2.0.11
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#      make install
#      cd ..
#
#   autogen
#      cd autogen-5.18.10
#      ./configure --prefix=${HOME} --enable-shared --enable-static
#      make
#      make check
#      make install
#      cd ..
#

echo " "
echo "************"
echo "Building GCC"
echo "************"
echo " "

# Get the 6.1.0 release from http://www.netgull.com/gcc/releases/gcc-6.1.0/
# or, if willing and brave, get the latest 6.1.1 snapshot (6.1.1 is unreleased) from
# http://www.netgull.com/gcc/snapshots/20160526 or whatever is the latest snapshot
# There are even snapshots from the GCC7 branch.

echo " "
echo "**************"
echo "GCC: configure"
echo "**************"
echo " "

mkdir -p gcc_workdir
cd gcc_workdir

setenv COLLECT_GCC gcc
setenv COLLECT_LTO_WRAPPER ${HOME}/libexec/gcc/x86_64-suse-linux-gnu/6.1.1/lto-wrapper

${HOME}/gcc-6-20160526/configure --prefix=${HOME} --with-gmp=${HOME} --with-mpfr=${HOME}\
	--with-mpc=${HOME} --with-isl=${HOME} --disable-nls --enable-languages=c,c++,fortran\
	--with-gxx-include-dir=${HOME}/include/g++ --with-system-zlib --enable-shared\
	--enable-static --enable-__cxa_atexit --disable-multilib --build=x86_64-suse-linux

#
#  --disable-nls 
#
#  The --enable-nls option enables Native Language Support (NLS), which lets GCC output 
#  diagnostics in languages other than American English.  Native Language Support is enabled
#  by default if not doing a Canadian cross build.  The --disable-nls option disables NLS. 
#
#  --enable-languages=lang1,lang2,...
#
#  Specify that only a particular subset of compilers and their runtime libraries should be built.
#  For a list of valid values for langN you can issue the following command in the gcc directory 
#  of your GCC source tree:
#
#        cd ${HOME}/gcc-6-20160526/gcc
#        grep ^language= */config-lang.in
#
#  Currently, you can use any of the following: all, ada, c, c++, fortran, go, java, jit, 
#  lto, objc, obj-c++.  Building the Ada compiler has special requirements, see below.
#  If you do not pass this flag, or specify the option all, then all default languages
#  available in the gcc sub-tree will be configured.  Ada, Go, Jit, and Objective-C++ 
#  are not default languages.  LTO is not a default language, but is built by default 
#  because --enable-lto is enabled by default.  The other languages are default languages. 
#
#  --with-gxx-include-dir=dirname
#
#  Specify the installation directory for G++ header files.  The default depends on other
#  configuration options, and differs between cross and native configurations.
#
#  --with-system-zlib
#
#  Use installed ‘zlib’ rather than that included with GCC.
#
#  --enable-shared
#
#  Build shared versions of libraries, if shared libraries are supported on the target
#  platform.  Unlike GCC 2.95.x and earlier, shared libraries are enabled by default
#  on all platforms that support shared libraries.
#
#  --enable-__cxa_atexit
#
#  Define if you want to use __cxa_atexit, rather than atexit, to register C++ destructors
#  for local statics and global objects.  This is essential for fully standards-compliant
#  handling of destructors, but requires __cxa_atexit in libc.  This option is currently
#  only available on systems with GNU libc.  When enabled, this will cause -fuse-cxa-atexit
#  to be passed by default. 
#
#  --disable-multilib
#
#  Specify that multiple target libraries to support different target variants, calling
#  conventions, etc. should not be built.  The default is to build a predefined set of them.
#

echo " "
echo "*********"
echo "GCC: make"
echo "*********"
echo " "

make

echo " "
echo "***************"
echo "GCC: make check"
echo "***************"
echo " "

make check

echo " "
echo "*****************"
echo "GCC: make install"
echo "*****************"
echo " "

make install

#
#  ----------------------------------------------------------------------
#  Libraries have been installed in:
#     /u/oppe/lib/../lib64
#  
#  If you ever happen to want to link against installed libraries
#  in a given directory, LIBDIR, you must either use libtool, and
#  specify the full pathname of the library, or use the `-LLIBDIR'
#  flag during linking and do at least one of the following:
#     - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
#       during execution
#     - add LIBDIR to the `LD_RUN_PATH' environment variable
#       during linking
#     - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
#     - have your system administrator add LIBDIR to `/etc/ld.so.conf'
#  
#  See any operating system documentation about shared libraries for
#  more information, such as the ld(1) and ld.so(8) manual pages.
#

exit
