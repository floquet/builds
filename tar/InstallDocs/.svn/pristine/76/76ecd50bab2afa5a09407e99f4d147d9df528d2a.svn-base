
Scalasca on garnet for COST

Source
http://www.scalasca.org/software/scalasca-2.x/
The "Software" tab and subpage "Download" has --
in addition to the base sofware -- a link to
build requirements.  The developers write:
      Note that neither Score-P nor the CUBE4 GUI are included
      in the Scalasca distribution tarball but have to be
      downloaded and installed separately. See the build
      requirements page for download links.

The requirements page has more information and links
to the recommended and required software.

Recommended libraries/packages
The following packages are not strictly necessary for
 building Scalasca v2, but are strongly recommended
 to make effective use of Scalasca:

    Score-P v1.2
    Scalasca v2 is based on the community instrumentation
 and measurement infrastructure Score-P. To generate event
 traces for Scalasca to analyze, a working installation
 of Score-P is therefore required.

    CUBE4 library v4.2
    The Scalasca v2 distribution package only includes the core
   writer part of the CUBE4 library.  Therefore, a separate full
  installation including reader/writer libraries,
  GUI, and command-line tools is recommended.

Optional libraries

    OTF2 library v1.2
    Although the Scalasca v2 distribution tarball comes
  with a recent version of the OTF2 library included,
  it might be desired to use a separate installation
 instead (e.g., to "share" with the Score-P measurement system).

    zlib library v1.2.3 or newer
    The zlib library is only needed if backwards compatibility
 support for compressed trace files written in EPILOG format
 (generated by Scalasca v1) is desired.
 In cross-compiling environments, zlib has to be compiled for
 the compute nodes (i.e., backend).

Did not build SIONlib.
    SIONlib library v1.3p5 or newer
    The SIONlib library is only needed if the included OTF2
    library included shall be configured to support SIONlib
    container files for storing trace data.

  =========== CUBE4 on garnet, below ===========

module swap PrgEnv-pgi PrgEnv-gnu
export PREFIX=/usr/local/usp/COST/scalasca-2.0-gnu
# C compiler command for the frontend build
CC_FOR_BUILD=gcc
# C++ compiler command for the frontend build
CXX_FOR_BUILD=g++
CC=cc
CXX=CC

In fact, cube (backend)
    C99 compiler used:          cc -std=c99
is the right choice.
Previously, used CC=gcc and CXX=g++ and yet after
"configure" the above was printed.  How did "configure" know?
Moreover,
ldd ./build-backend/.libs/libcube4w.so
shows alps is required whereas
ldd ./build-frontend/.libs/libcube4w.so
is simpler and does not require alps.
How did configure know?  Answer: configure script has
a Cray detection algorithm.

cd cube-4.2.2
mkdir build-gcc
cd build-gcc
../configure --prefix=$PREFIX \
 --with-cubelib --with-tools \
 --with-cwriter --with-java-reader \
 --with-qt=/usr/lib64/qt4 \
 --enable-static --enable-shared

Use either 
 --with-qt=/usr/lib64/qt4 \
or
 --with-qt=/usr/lib64/qt3 \
depending on which has the most complete installation

configure:  Didn't find any SAX parser implementations (  xerces2-j.jar xerces-j2.jar xercesImpl.jar xerces.jar ) - disable java reader.
Indeed
rpm -qa | grep -i xerces
[nothing]

On garnet:
checking for qmake... no
Indeed, rpm -qa | grep qt4
has several qt-related RPMs such as libqt4
but does not have Qt executables such as qmake.
In contrast, the utility server has RPM "qt" and "qt-devel".
Also, copper has both Qt4 and xerces.

  cube (backend):
    Cube C Writer Library:      yes
    Backend zlib compression :  no
    C99 compiler used:          cc -std=c99
     Compiler flags used:       -g -O2

    Cube C Writer Library:      yes
    Cube C++ Library:           yes
    Cube Tools:                 yes
garnet Cube GUI:                   no
copper Cube GUI:                   yes
garnet Cube Java Reader:           no
copper Cube Java Reader:           yes

make 2>&1 | tee make.log
make install
find $PREFIX

  =========== CUBE4 on garnet, above ===========
  =========== OTF2 on garnet, below ===========

module swap PrgEnv-pgi PrgEnv-gnu
export PREFIX=/usr/local/usp/COST/scalasca-2.0-gnu

# C compiler command for the frontend build
export CC_FOR_BUILD=gcc

# C++ compiler command for the frontend build
export CXX_FOR_BUILD=g++

# Fortran 77 compiler command for the frontend build
export F77_FOR_BUILD=gfortran

# Fortran compiler command for the frontend build
export FC_FOR_BUILD=gfortran

export CC=cc
export CXX=CC
export F77=ftn
export FC=ftn

cd otf2-1.2.1

./configure --prefix=$PREFIX \
 --enable-static --enable-shared

make 2>&1 | tee make.log
make install
# Already too much to see with find.
find $PREFIX

ldd $PREFIX/lib/libotf2.so.3.0.0
does not have alps, whereas
ldd $PREFIX/lib/backend/libotf2.so.3.0.0
does have alps.

  =========== OTF2 on garnet, above ===========
  =========== Score-P on garnet, below ===========

module swap PrgEnv-pgi PrgEnv-gnu
module load papi/5.3.0
export PREFIX=/usr/local/usp/COST/scalasca-2.0-gnu

# get information on options using
./configure --help=recursive

# To use what has already been installed, in particular, cube.
export PATH=${PATH}:${PREFIX}/bin
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PREFIX}/lib

# C compiler command for the frontend build
export CC_FOR_BUILD=gcc
# C++ compiler command for the frontend build
export CXX_FOR_BUILD=g++
# Fortran 77 compiler command for the frontend build
export F77_FOR_BUILD=gfortran
# Fortran compiler command for the frontend build
export FC_FOR_BUILD=gfortran

export CC=cc
export CXX=CC
export F77=ftn
export FC=ftn

export MPICC=cc
export MPICXX=CC
export MPIF77=ftn
export MPIFC=ftn

export PAPI_INC=/opt/cray/papi/5.3.0/include 
export PAPI_LIB=/opt/cray/papi/5.3.0/bin

./configure --prefix=$PREFIX \
 --with-cube=${PREFIX}/bin \
 --with-otf2=${PREFIX}/bin \
 --with-pdt=/usr/local/usp/COST/pdt-3.15/x86_64/bin \
 --enable-shared --enable-static

On garnet I did not use
 --with-otf2=${PREFIX}/bin
because I did not notice it in the long ./configure --help=recursive
output, nonetheless otf2-config was found because it was in PATH.

Configuration summary:
  Score-P
    Platform:                   crayxt (auto detected)
    Cross compiling:            yes (auto detected)
    Machine name:               Cray XT
    otf2 support:               yes, using external via /usr/local/usp/COST/scalasca-2.0-gnu/bin/otf2-config
    opari2 support:             yes, using internal
    cube support:               yes, using external via /usr/local/usp/COST/scalasca-2.0-gnu/bin/cube-config

  Score-P (backend):
    C99 compiler used:          cc -std=c99
    PAPI support:               no
    getrusage support:          yes
    RUSAGE_THREAD support:      yes, using -D_GNU_SOURCE
    metric plugins support:     yes, using -ldl
    libcudart support:          no
    libcuda support:            no
    libcupti support:           no
    cuda support:               no, see also libcudart, libcuda, and libcupti support
    OpenMP support:             yes, using -fopenmp
    PDT support:                no
    Cobi support:               no
    Clock used for measurement: clock_gettime, using CLOCK_MONOTONIC 
    libbfd support:             no
    compiler instrumentation:   yes, using nm
    Online access support:      yes

  Score-P (frontend):
    C99 compiler used:          gcc -std=c99
    Online access support:      yes
    PDT support:                no
    Cobi support:               no
    cube reader support:        yes, using -I/usr/local/usp/COST/scalasca-2.0-gnu/include/cube  -L/usr/local/usp/COST/scalasca-2.0-gnu/lib -lcube4  -lm

  Score-P (MPI backend):
    MPI support for C:          yes
    C compiler used for MPI:    cc
    MPI support C++:            yes
    C++ compiler used for MPI:  CC
    MPI support F77:            yes
    F77 compiler used for MPI:  ftn
    MPI support F90:            yes
    F90 compiler used for MPI:  ftn
    Library used for MPI:       
    C99 compiler used:          cc -std=c99
    SION MPI support:           no
    PAPI support:               no
    getrusage support:          yes
    RUSAGE_THREAD support:      yes, using -D_GNU_SOURCE
    metric plugins support:     yes, using -ldl
    libcudart support:          no
    libcuda support:            no
    libcupti support:           no
    cuda support:               no, see also libcudart, libcuda, and libcupti support
    OpenMP support:             yes, using -fopenmp
    PDT MPI instrumentation:    yes
    libbfd support:             no
    compiler instrumentation:   yes, using nm
    Online access support:      yes

  OPARI2
    Platform:                   crayxt (provided)
    Cross compiling:            yes (provided)

Notice PAPI support is no.

make 2>&1 | tee make.log
make install

  =========== Score-P on garnet, above ===========
  =========== Scalasca on garnet, below ===========

module swap PrgEnv-pgi PrgEnv-gnu
# PAPI is probably not necessary for scalasca
module load papi/5.3.0
export PREFIX=/usr/local/usp/COST/scalasca-2.0-gnu

# get information on options using
./configure --help=recursive

# To use what has already been installed, in particular, cube.
export PATH=${PATH}:${PREFIX}/bin
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PREFIX}/lib

# C compiler command for the frontend build
export CC_FOR_BUILD=gcc
# C++ compiler command for the frontend build
export CXX_FOR_BUILD=g++
# Fortran 77 compiler command for the frontend build
export F77_FOR_BUILD=gfortran
# Fortran compiler command for the frontend build
export FC_FOR_BUILD=gfortran

export CC=cc
export CXX=CC
export F77=ftn
export FC=ftn

export MPICC=cc
export MPICXX=CC
export MPIF77=ftn
export MPIFC=ftn

untar and cd scalasca-2.0

# # Building the software insists on using the dynamic library
# # version of zlib compiled for the backend (the compute nodes)
# export LIBZ_INCLUDE=/usr/local/usp/COST/zlib-1.2.8-gnu/include
# export LIBZ_LIB=/usr/local/usp/COST/zlib-1.2.8-gnu/libso
# 
# ./configure --prefix=$PREFIX \
#  --with-cube=${PREFIX}/bin \
#  --with-otf2=${PREFIX}/bin \
#  --with-libz-include=/usr/local/usp/COST/zlib-1.2.8-gnu/include \
#  --with-libz-lib=/usr/local/usp/COST/zlib-1.2.8-gnu/libso \
#  --enable-shared --enable-static
# 
# /usr/bin/ld: attempted static link of dynamic object
# `/usr/local/usp/COST/scalasca-2.0-gnu/lib/backend/libcube4w.so'

Above does not work, that is, building a shared library version,
because building uses shared libraries also for the backend
though ftn wants to build a static executable.

export LIBZ_INCLUDE=/usr/local/usp/COST/zlib-1.2.8-gnu/include
export LIBZ_LIB=/usr/local/usp/COST/zlib-1.2.8-gnu/lib

./configure --prefix=$PREFIX \
 --with-cube=${PREFIX}/bin \
 --with-otf2=${PREFIX}/bin \
 --with-libz-include=/usr/local/usp/COST/zlib-1.2.8-gnu/include \
 --with-libz-lib=/usr/local/usp/COST/zlib-1.2.8-gnu/lib \
 --enable-static --disable-shared

make 2>&1 | tee make.log
make install

topdir=$PREFIX

cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *

  =========== Scalasca on garnet, above ===========


