
From my copy in gold of VASP installed on jade copied files to get
under /usr/local/applic/vasp the potentials
the directories
pot  pot_GGA  potpaw  potpaw_GGA  potpaw_PBE

(In my copy the potentials were under directory Potentials)

Also from my copy under SRC/doc copied documentation to
/usr/local/applic/vasp/doc

# For the potentials and doc, allow ug to read and no one to write.
# Also, changed so that ug can execute directories.
# For "other" no rwx.
# The command were
cd /usr/local/applic/vasp
ddd="doc  pot  pot_GGA  potpaw  potpaw_GGA  potpaw_PBE"
for i in $ddd ; do chmod -R ugo-w $i; done
for i in $ddd ; do chmod -R ug+r $i; done
for i in $ddd ; do find $i -type d -exec chmod ug+x {} \; ; done
for i in $ddd ; do chmod -R o-rwx $i; done

(Directories were also copied from the installation location
on jade, /usr/local/applic/vasp
doc pot  pot_GGA  potpaw  potpaw_GGA  potpaw_PBE
and a recursive diff was done with what was installed on diamond,
as a further check.  The files are the same.)

Under /usr/local/applic/vasp
mkdir 4.6.36
ln -s 4.6.36 default

scalapack test
 default
   compilers/intel11.1
   mpi/sgi_mpi-1.26
module load compilers/mkl_10.2.0

When the tar files are extracted, the directory name does not
include the third level of the version number.
Moreover, inside the distribution there is no indication of the
version, as far as I can find.
The files vasp.4.6.36.lib.tar.gz and vasp.4.6.36.tar.gz
become directories vasp.4.6 and vasp.4.lib .
I changed to include the subsubversion in order to avoid confusion.

Library source name changed to
   src-vasp.4.6.36.lib
The other tar file of vasp was unpacked four times
and given the names
   src-vasp.4.6.36
   src-vasp.4.6.36-gamma
   src-vasp.4.6.36-mpi-gamma
   src-vasp.4.6.36-mpi-scalapack

In /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36.lib

The first step is to compile in lib subdirectory.
The name of the library source directory was set to
src-vasp.4.6.36.lib whereas the installation directory
was set to lib .

created makefile.linux_intel from a linux makefile that has
CPP     = gcc -E -P -C $*.F >$*.f
specified the following
FC=ifort
CC=icc
CFLAGS = -O3
FFLAGS = -O3
FREE   =  -free

make -f makefile.linux_intel
cp lapack_atlas.o libdmy.a linpack_double.o  ../lib/
# Might not use lapack_atlas.o and linpack_double.o

cp makefile.linux_intel ../SRC/makefile.linux_intel-lib

 -------- building lib above , building plain vanilla vasp below --------

cd /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36
Only the pgi makefile has "-i8" option.  This option cannot
be used with the scalapack that was compiled because the
MKL libraries for which integer is 4 bytes were used.

cp makefile.linux_ifc_opt makefile.linux_intel
After editing, cp makefile.linux_intel Makefile

Put library list in the definition of SCA.
For non-parallel version did not include the following libraries:
#  -lmpi -lpthread

Scalapack does not have some routines of linpack,
for example, it is missing zgedi, so in fact linpack_double.o
of vasp is needed.

make

cp vasp ../bin/vasp
cp makefile.linux_intel ../SRC/makefile.linux_intel-plain

make clean

 -------- building plain vanilla vasp above, serial gamma below --------

cd /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36-gamma
cp /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36/makefile.linux_intel .
In makefile.linux_intel
Added cpp macro  -DwNGZhalf
cp makefile.linux_intel Makefile

cp vasp ../bin/vasp-gamma
cp makefile.linux_intel ../SRC/makefile.linux_intel-gamma

make clean

 -------- serial gamma above, parallel gamma below  --------

This version also has scalapack.

cd /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36-mpi-gamma
cp /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36-gamma/makefile.linux_intel .

In makefile.linux_intel
Change CPP to
CPP     = $(CPP_)  -DHOST=\"LinuxIFC\" -DwNGZhalf \
          -Dkind8 -DCACHE_SIZE=12000 -DRACCMU_DGEMV \
          -DscaLAPACK -DMPI
and added -lmpi -lpthread to SCA.
Changed from fftw to
FFT3D   = fftmpi.o fftmpi_map.o fft3dlib.o 
and removed -I/usr/local/usp/PETtools/CE/pkgs/fftw-3.2.2/include
because MAPSET() is needed.

cp makefile.linux_intel Makefile

cp vasp ../bin/vasp-mpi-gamma
cp makefile.linux_intel ../SRC/makefile.linux_intel-mpi-gamma

make clean

 -------- parallel gamma above, parallel with scalapack below --------

This version also has scalapack, but without gamma.

cd /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36-mpi-scalapack
cp /usr/local/applic/vasp/4.6.36/src-vasp.4.6.36-mpi-gamma/makefile.linux_intel .

In makefile.linux_intel
remove -DwNGZhalf from CPP

cp makefile.linux_intel Makefile

cp vasp ../bin/vasp-mpi-scalapack
cp makefile.linux_intel ../SRC/makefile.linux_intel-mpi-scalapack

make clean

 -------- parallel with scalapack above --------

Testing below.

Note that benchmark.tar.gz does not have a subdirectory.
Same problem with bench.Hg.tar.gz

mkdir benchmark-intel
cp bench.Hg.tar.gz benchmark-intel
cd benchmark-intel
tar xvzf bench.Hg.tar.gz
mkdir output

Add vasp to PATH.
For example,
PATH=/usr/local/applic/vasp/4.6.36/bin:$PATH

Make sure that the file INCAR has
   IALGO  =     48

Into /usr/local/applic/vasp/4.6.36/SRC/benchmark-intel
were copied reference files from runs on sapphire.
The references in the tar file for bench.Hg,
renamed OSZICAR.ref_old and OUTCAR.ref_old,
are much different from the runs on sapphire.

Batch jobs cannot be run in /usr/local/applic for security
reasons.  Can do
cd /usr/local/applic/vasp/4.6.36/SRC
cp -R benchmark-intel $WORKDIR
and change the #PBS -o ... appropriately.

If testing interactively then login to computer node using
 qsub -A  erdcssta -q standard -l select=8:ncpus=8:mpiprocs=8,place=scatter:excl,walltime=1:00:00 -I

Testing above.

In the end, make sure files belong to group vasp.

For sources
/usr/local/applic/vasp/4.6.36/
   SRC/
   src-vasp.4.6.36/
   src-vasp.4.6.36-gamma/
   src-vasp.4.6.36-mpi-gamma/
   src-vasp.4.6.36-mpi-scalapack/
   src-vasp.4.6.36.lib/
 change group to staff and remove "other" permissions
because VASP restricts distribution of their software.

Destinations are
   /usr/local/applic/vasp/4.6.36/lib
   /usr/local/applic/vasp/4.6.36/bin
The executables in bin are
   vasp
   vasp-gamma
   vasp-mpi  -> vasp-mpi-scalapack
   vasp-mpi-gamma
   vasp-mpi-scalapack
Wrappers below
   runvasp
   runvasp-gamma
   runvasp-mpi-gamma
   runvasp-mpi-scalapack
   runvasp-mpi
   All of above are links to /usr/local/usp/appwrap/appwrap.pl
   runvasp-gamma.orig
   runvasp-mpi-scalapack.orig
   runvasp.orig
   runvasp-mpi-gamma.orig
   runvasp-mpi.orig -> runvasp-mpi-scalapack.orig
Wrappers above

cd /usr/local/applic/vasp/4.6.36/bin
# Start with
# vasp  vasp-gamma  vasp-mpi-gamma  vasp-mpi-scalapack

ln -s vasp-mpi-scalapack vasp-mpi

ln -s /usr/local/usp/appwrap/appwrap.pl runvasp
ln -s /usr/local/usp/appwrap/appwrap.pl runvasp-gamma
ln -s /usr/local/usp/appwrap/appwrap.pl runvasp-mpi-gamma
ln -s /usr/local/usp/appwrap/appwrap.pl runvasp-mpi-scalapack
ln -s /usr/local/usp/appwrap/appwrap.pl runvasp-mpi

Made
runvasp.orig
runvasp-gamma.orig
runvasp-mpi-gamma.orig
runvasp-mpi-scalapack.orig
where first part is always
------------------------------------------------
#!/bin/csh -f

source /usr/share/modules/init/csh
module load compilers/intel11.1
module load mpi/sgi_mpi-1.26
module load compilers/mkl_10.2.0

set VASP_PATH = /usr/local/applic/vasp/4.6.36/bin
------------------------------------------------
and last line is one of the following
$VASP_PATH/vasp
$VASP_PATH/vasp-gamma
mpiexec_mpt -np $1 $VASP_PATH/vasp-mpi-gamma
mpiexec_mpt -np $1 $VASP_PATH/vasp-mpi-scalapack

# The ldd command indicates that the serial versions need
# the mpi and mkl libraries.

ln -s runvasp-mpi-scalapack.orig runvasp-mpi.orig

chmod ug+rx *
chmod o-rwx *
chmod g-w *

cd ..
chmod ug+rx lib bin
chmod o-rwx lib bin

# Because VASP is licensed, not even vasp group members
# can see the source.

chmod -R go-rwx SRC src-vasp.4.6.36.lib
chmod -R go-rwx src-vasp.4.6.36-gamma  src-vasp.4.6.36-mpi-gamma
chmod -R go-rwx src-vasp.4.6.36  src-vasp.4.6.36-mpi-scalapack

cd ..
> pwd
/usr/local/applic/vasp
chown -R scheinin:vasp .

