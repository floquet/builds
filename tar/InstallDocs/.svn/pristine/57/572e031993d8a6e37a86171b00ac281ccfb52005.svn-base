
January 2016 version is
https://www.earthsystemcog.org/projects/esmf/
Requires registration form to be filled-out.

Greetings Everyone,

1) Website change complete:  The old ESMF home page at NCAR will be going away completely as of May 1, 2010 (that means no redirect, no message).  The current homepage at NOAA/CIRES is http://www.earthsystemmodeling.org <http://www.earthsystemmodeling.org/> .

2) ESMF in CCSM4:  The new public release of the Community Climate System Model, CCSM4, includes ESMF interfaces on all components.  This is an exciting step forward in a long collaboration.  Current work with CCSM examines the impact of the replacement of selected CCSM functions with ESMF capabilities.  The CCSM 4.0 User's Guide describes how to build the ESMF version of the model; see: http://www.ccsm.ucar.edu/models/ccsm4.0/
CCSM4 was tested with the most recent version of ESMF, v4.0.0rp1.

3) ESMF 2009 Annual Report available:  The 2009 Annual Report includes summaries of achievements and plans, along with detailed information on specific goals.  To view the report, visit:  http://www.earthsystemmodeling.org/plans/annual.shtml
The 2009 Report is the first link on the page.

4) NUOPC integration begins:  The National Unified Operational Prediction Capability
(NUOPC) is a consortium of U.S. operational numerical weather prediction centers that is using ESMF infrastructure as a technical foundation.  Work is beginning on the development of a NUOPC Layer to standardize the implementation of ESMF within models at NOAA, Navy, NASA and other sites, and to develop and encode content and usage conventions to further enhance interoperability.

Cheers,
Sylvia

***********************************
Sylvia Murphy
NESII/CIRES/NOAA Earth System Research Laboratory
325 Broadway, Boulder 80305
Email: sylvia.murphy@noaa.gov
Phone: 303-497-7753


 -----------------

Earth System Modeling Framework (ESMF)
Available from
(Old address was http://www.esmf.ucar.edu/download/index.shtml)
http://www.earthsystemmodeling.org/

Installation of version esmf_4_0_0r below.
(After which is information concerning installation of version 3_1_0rp2.)

Filled-out registration and got most recent version
on Feb. 1, 2010.

Website moved to http://www.earthsystemmodeling.org/

Documentation
Includes build information
Earth System Modeling Framework
ESMF User Guide  
Version 4.0 
Oct. 30, 2009
Users guide in HTML form online
http://www.earthsystemmodeling.org/esmf_releases/public/ESMF_4.0.0r/ESMF_usrdoc/
General Documentation
Earth System Modeling Framework
ESMF Reference Manual for Fortran  
Version 4.0 Oct. 30, 2009
http://www.earthsystemmodeling.org/esmf_releases/public/last/ESMF_usrdoc.pdf
http://www.earthsystemmodeling.org/esmf_releases/public/last/ESMF_refdoc.pdf
http://www.earthsystemmodeling.org/documents/dev_guide.pdf

cd /usr/local/usp/esmf/4.0.0r/src
mkdir  doc  include  lib  mod src

cd doc
wget the three PDF files mentioned above

cd ../src
tar xzf esmf_4_0_0r_src.tar.gz
cd esmf

# The untar'ed directory name is too simple, it loses the version.
# Will keep it simple because the version is defined in a higher
# level directory.

# Modules
# sapphire
module load xt-libsci/10.3.4
# > module list [partial list below]
# pgi/8.0.5 xt-libsci/10.3.4 xt-mpt/3.4.0 PrgEnv-pgi/2.1.56HDB
# jade
module load xt-libsci/10.4.0
# > module list [partial list below]
# pgi/9.0.4 xt-libsci/10.4.0 xt-mpt/3.5.0 PrgEnv-pgi/2.2.41A_PS05
# diamond
module load compilers/mkl_10.2.0
# > module list
# Currently Loaded Modulefiles:
#   1) compilers/intel11.1  2) mpi/sgi_mpi-1.26   3) compilers/mkl_10.2.0
# garnet   module xt-libsci/10.4.9  loaded by default

# Same on sapphire, jade and diamond.
export ESMF_DIR=/usr/local/usp/esmf/4.0.0r/src/esmf
export ESMF_INSTALL_PREFIX=/usr/local/usp/esmf/4.0.0r

# capital oh
export ESMF_BOPT=O
export ESMF_OPTLEVEL=3

# The above concept of optimization option format is rather restricted.
# Added more options using the following for sapphire.
export ESMF_F90COMPILEOPTS="-fast -Mipa=fast,inline"
export ESMF_F90LINKOPTS="-fast -Mipa=fast,inline"
export ESMF_CXXCOMPILEOPTS="-fast -Mipa=fast -Minline=levels:10"
export ESMF_CXXLINKOPTS="-fast -Mipa=fast -Minline=levels:10"
# Added more options using the following for jade.
export ESMF_F90COMPILEOPTS="-fast"
export ESMF_F90LINKOPTS="-fast"
export ESMF_CXXCOMPILEOPTS="-fast"
export ESMF_CXXLINKOPTS="-fast"
# For diamond
export ESMF_F90COMPILEOPTS="-O3"
export ESMF_F90LINKOPTS="-O3"
export ESMF_CXXCOMPILEOPTS="-O3"
export ESMF_CXXLINKOPTS="-O3"
# For garnet
export ESMF_F90COMPILEOPTS="-fast"
export ESMF_F90LINKOPTS="-fast"
export ESMF_CXXCOMPILEOPTS="-fast"
export ESMF_CXXLINKOPTS="-fast"

# Did not use "-ipo" for diamond because the experience from other
# applications is that when libraries are created the "-ipo" results
# in the useless libraries.  Perhaps because first-pass objects that
# are incompletely compiled are put into the library.

# ESMF_COMPILER (together with ESMF_COMM) affect the
# name that is expected for the compiler executables. Furthermore, the 
# ESMF_COMPILER setting is used to select compiler and linker flags
# consistent with the compilers indicated.
# To see possible values for ESMF_COMPILER,
# cd to $ESMF_DIR/build_config and list the directories there.
# I think we want "Unicos.pgi.default"
# However, "make info" showed that the procedure looked for Linux
# rather than Unicos.

# Can specify something other than "default" suffix using ESMF_SITE

# For sapphire and jade, created
# new build_config subdirectory CNL.pgi.default/  just in case
# something needed to be changed but in the end the platform
# specific configurations where set as environment variables,
# such as ESMF_F90COMPILEOPTS.
cd build_config
mkdir CNL.pgi.default
cp Unicos.pgi.default/* CNL.pgi.default/
cd ..
# For diamond use Linux.intel.default

# Did not use ESMF_SITE because it seems that CNL.pgi.default must
# exist in any case.

# sapphire and jade
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
export ESMF_MPIRUN=mpirun.unicos
export ESMF_OPENMP=OFF

# diamond
export ESMF_OS=Linux
export ESMF_COMM=mpi
export ESMF_COMPILER=intel
export ESMF_MPIRUN=mpiexec_mpt
export ESMF_OPENMP=OFF

# garnet
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
export ESMF_MPIRUN=mpirun.unicos
export ESMF_OPENMP=OFF

# Can use "make info" to check the configuration.
# A note with regard to OpenMP.  The default for the Crays,
# given the above configuration without specifying ESMF_OPENMP
# is that ESMF_OPENMP is OFF.  For diamond, if ESMF_OPENMP is
# not specified then it is ON.  I forced it to be OFF in order
# to simplify the code.

# jade and sapphire
In file 4.0.0r/src/esmf/build_config/CNL.pgi.default/build_rules.mk
Under ifeq ($(ESMF_COMM),mpi)
ESMF_MPIRUNDEFAULT      = mpirun.unicos
# diamond
In file 4.0.0r/src/esmf/build_config/Linux.intel.default/build_rules.mk
Under ifeq ($(ESMF_COMM),mpi)
ESMF_MPIRUNDEFAULT      = mpiexec_mpt $(ESMF_MPILAUNCHOPTIONS)
Also, from ESMF_ABISTRING := x86_64_small to
ESMF_ABISTRING := x86_64_medium
# garnet
In file 4.0.0r/src/esmf/build_config/CNL.pgi.default/build_rules.mk
Under ifeq ($(ESMF_COMM),mpi)
ESMF_MPIRUNDEFAULT      = mpirun.unicos

# sapphire
export ESMF_LAPACK=netlib
export ESMF_LAPACK_LIBPATH=/opt/xt-libsci/10.3.4/pgi/lib
export ESMF_LAPACK_LIBS="-lsci"
# jade
export ESMF_LAPACK=netlib
export ESMF_LAPACK_LIBPATH=/opt/xt-libsci/10.4.0/pgi/lib
export ESMF_LAPACK_LIBS="-lsci"
# diamond
export ESMF_LAPACK=mkl
export ESMF_LAPACK_LIBPATH=/opt/intel/mkl/10.2.0.013/lib/em64t
export ESMF_LAPACK_LIBS="-lmkl_lapack -lmkl_sequential -lmkl_intel_lp64 -lmkl_core"
# garnet
export ESMF_LAPACK=netlib
export ESMF_LAPACK_LIBPATH=/opt/xt-libsci/10.4.9/pgi/lib
export ESMF_LAPACK_LIBS="-lsci"

# NETCDF would be useful but it is not set because it is likely
# that the PETTT installation does not have C++ bindings and
# not both Crays have the Cray NetCDF.

make 2>&1 | tee make.log

# For testing the instructions say
#    a) 'gmake unit_tests' to build and run the unit tests
#    b) 'gmake system_tests' to build and run the system tests
#    c) 'gmake check' to build and run the unit and system tests.
#    d) 'gmake examples' to build and run the examples
#    e) 'gmake demos' to build and run the demos
#    f) 'gmake all_tests' to build and run all available tests and demos
# however, to simplify the procedure in case there are errors,
# compilation and running a test job are done separately.

# A long time is needed to compile the tests.

On garnet, in file
./lib/libO/CNL.pgi.64.mpi.default/esmf.mk
remove -lpgc because it conflicts with
 -lpgmp that is added by cc compiler.

On garnet, in file /work/local/usp/esmf/4.0.0r/src/esmf/scripts/libs.pgCC
Change from
$PGCCEXE -show 2>&1 | grep DEFSTDLIBS | sed 's/DEFSTDLIBS//g' | sed 's/=//g'
Change to
$PGCCEXE -show 2>&1 | grep DEFSTDLIBS | sed 's/DEFSTDLIBS//g' | sed 's/=//g' | sed 's/-lpgc//g'

On garnet, in file /work/local/usp/esmf/4.0.0r/src/esmf/scripts/libs.pgf90
similar change to two places.
if [ $1 = "ftn" ]; then
$PGF90EXE -show 2>&1 | grep DEFSTDLIBS | sed 's/DEFSTDLIBS//g' | sed 's/=//g' | sed 's/-lpthread//g' | sed 's/-lgcc//g'| sed 's/-lpgc//g' | sed 's/-lc//g'
else
$PGF90EXE -show 2>&1 | grep DEFSTDLIBS | sed 's/DEFSTDLIBS//g' | sed 's/-lpgc//g' | sed 's/=//g'
fi
(Change might not be correct for "else" part.)

make build_unit_tests
make build_system_tests
make build_examples
make build_demos

# sapphire
qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I
cd /usr/local/usp/esmf/4.0.0r/src/esmf
module load xt-libsci/10.3.4
export ESMF_DIR=/usr/local/usp/esmf/4.0.0r/src/esmf
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
export ESMF_MPIRUN=mpirun.unicos

# jade
qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I
cd /usr/local/usp/esmf/4.0.0r/src/esmf
module load xt-libsci/10.4.0
export ESMF_DIR=/usr/local/usp/esmf/4.0.0r/src/esmf
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
export ESMF_MPIRUN=mpirun.unicos

# diamond
qsub -A  erdcssta -q standard -l select=8:ncpus=8:mpiprocs=8,place=scatter:excl,walltime=1:00:00 -I
cd /usr/local/usp/esmf/4.0.0r/src/esmf
module load compilers/mkl_10.2.0
export ESMF_DIR=/usr/local/usp/esmf/4.0.0r/src/esmf
export ESMF_OS=Linux
export ESMF_COMM=mpi
export ESMF_COMPILER=intel
export ESMF_MPIRUN=mpiexec_mpt

# garnet
qsub -A ERDCS97290STA -q standard -l ncpus=64,walltime=1:30:00 -I
cd /usr/local/usp/esmf/4.0.0r/src/esmf
# Make sure module xt-libsci is loaded.
export ESMF_DIR=/usr/local/usp/esmf/4.0.0r/src/esmf
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
export ESMF_MPIRUN=mpirun.unicos


make run_unit_tests 2>&1 | tee run_unit_tests.log
# Result:
# sapphire
# Found 1256 non-exhaustive multi-processor unit tests,
# 1256 passed and 0 failed.
# jade
# Found 1256 non-exhaustive multi-processor unit tests,
# 1256 passed and 0 failed.
# diamond
# Found 1256 non-exhaustive multi-processor unit tests,
# 1256 passed and 0 failed.
# garnet
# Found 1256 non-exhaustive multi-processor unit tests,
# 1250 passed and 6 failed.

make run_system_tests 2>&1 | tee run_system_tests.log
# Result:
# sapphire
# Found 30 multi-processor system tests, 30 passed and 0 failed.
# jade
# Found 30 multi-processor system tests, 30 passed and 0 failed.
# diamond
# Found 30 multi-processor system tests, 29 passed and 1 failed.
# garnet
# Found 30 multi-processor system tests, 29 passed and 1 failed.

make run_examples  2>&1 | tee run_examples.log
# Result:
# sapphire
# Found 60 multi-processor examples, 60 passed and 0 failed.
# jade
# Found 60 multi-processor examples, 60 passed and 0 failed.
# diamond
# Found 60 multi-processor examples, 60 passed and 0 failed.
# garnet
# Found 60 multi-processor examples, 54 passed and 6 failed.

make run_demos
# Actually, no test for run_demos.

# Returning to the front-end node.

# Be certain that the following are still defined as above
 ESMF_DIR and ESMF_INSTALL_PREFIX

make install

make installcheck

Check that files were installed in  include/  lib/  mod/

make clean

New version does not put many files in include/ for example,
there is a ESMCI_LocalArray.h in the source and it is found
in "PREFIX"/include/ in version 3.1.0 but not in version 4.0.0 .

cd /usr/local/usp/esmf/4.0.0r
find . -type d -exec chmod ugo+x {} \; -print
chmod -R ugo+r .
chmod -R o-w .
chmod -R o-rwx src
chown -R scheinin:staff .

Installation of version esmf_4_0_0r above.
Installation of version esmf_3_1_0rp2 below.

# created directories under ESMF
mkdir bin  doc include  lib  src

# in directory doc did
cd doc
wget http://www.esmf.ucar.edu/esmf_releases/public/last/ESMF_refdoc.pdf
wget http://www.esmf.ucar.edu/esmf_releases/public/last/ESMF_usrdoc.pdf

cd ../src

tar xzf esmf_3_1_0rp2_src.tar.gz

# Result was file esmf.
# Just to keep track of the version I did
mv esmf esmf_3_1_0rp2

# The following location is the temporary installation destination
# for trying the build procedure.  Needs to be changed for final build.
export ESMF_DIR=/work/scheinin/ESMF/src/esmf_3_1_0rp2
export ESMF_INSTALL_PREFIX=/work/scheinin/ESMF

# capital oh
export ESMF_BOPT=O
export ESMF_OPTLEVEL=3

# The above concept of optimization option format is rather restricted.
# Add more options using the following
export ESMF_F90COMPILEOPTS="-fast -Mipa=fast,inline"
export ESMF_F90LINKOPTS="-fast -Mipa=fast,inline"
export ESMF_CXXCOMPILEOPTS="-fast -Mipa=fast -Minline=levels:10"
export ESMF_CXXLINKOPTS="-fast -Mipa=fast -Minline=levels:10"


# ESMF_COMPILER (together with ESMF_COMM) affect the
# name that is expected for the compiler executables. Furthermore, the 
# ESMF_COMPILER setting is used to select compiler and linker flags consistent
# with the compilers indicated.
# To see possible values for ESMF_COMPILER, cd to $ESMF_DIR/build_config and list
# the directories there.
# I think we want "Unicos.pgi.default"
# However, "make info" showed that the procedure looked for Linux
# rather than Unicos.

# Can specify something other than "default" suffix using ESMF_SITE

# New build_config subdirectory CNL.pgi.default/ in case
# something needed to be changed but in the end the platform
# specific configurations where set as environment variable
# such as ESMF_F90COMPILEOPTS.
cd build_config
mkdir CNL.pgi.default
cp Unicos.pgi.default/* CNL.pgi.default/
cd ..

# Did not use ESMF_SITE because it seems that CNL.pgi.default must
# exist in any case.
# export ESMF_SITE=sapphire

export ESMF_OS=CNL

export ESMF_COMM=mpi
export ESMF_COMPILER=pgi

export ESMF_MPIRUN=mpirun.unicos

# To check the results
make info

make

# For testing the instructions say
#    a) 'gmake unit_tests' to build and run the unit tests
#    b) 'gmake system_tests' to build and run the system tests
#    c) 'gmake check' to build and run the unit and system tests.
#    d) 'gmake examples' to build and run the examples
#    e) 'gmake demos' to build and run the demos
#    f) 'gmake all_tests' to build and run all available tests and demos
# however, to simplify the procedure in case there are errors,
# compilation and running a test job are done separately.

# A long time is needed to compile the tests.
make build_unit_tests
make build_system_tests
make build_examples
make build_demos

# There does exist scripts in src/esmf_3_1_0rp2/scripts/ for using
# qsub, but it seems simpler to run the jobs interactively.

qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I

export ESMF_DIR=/work/scheinin/ESMF/src/esmf_3_1_0rp2
export ESMF_OS=CNL
export ESMF_COMM=mpi
export ESMF_COMPILER=pgi
# The value of ESMF_MPIRUN corresponds to a script in
# src/esmf_3_1_0rp2/scripts/ directory.
export ESMF_MPIRUN=mpirun.unicos

make run_unit_tests
# Result:
# jade and sapphire
# Found 650 non-exhaustive multi-processor unit tests, 646 passed and 4 failed.
# ( 607 passed and 43 failed when ncpus=4 is used. )

make run_system_tests
# Result:
# jade and sapphire
# Found 11 multi-processor system tests, 11 passed and 0 failed.

make run_examples
# Result:
# jade and sapphire
# Found 37 examples, 37 passed and 0 failed.

make run_demos
# Actually, no test for run_demos.

# Returning to the front-end node.

# Be certain that the following are still defined as above
export ESMF_DIR=/work/scheinin/ESMF/src/esmf_3_1_0rp2
export ESMF_INSTALL_PREFIX=/work/scheinin/ESMF

make install

make installcheck

delete below after closing problem on CrayPort
Several applications have "-lpgc" as part of the configuration for linking.
In particular, esmf, ncarg and silo.  While a satisfactory solution
would be to use a linking command that does not have  "-lpgc" and rely
on the cc or CC wrapper to add it, one application actually adds
"-lpgc" by relying on pgcc as shown below.

 $PGCCEXE -show 2>&1 | grep DEFSTDLIBS | sed 's/DEFSTDLIBS//g' | sed 's/=//g'

The is an additional consideration the will be described after describing
the results of linking with "-v".  In the past, and also in the present
on jade, "-lpgc" was added by the cc wrapper for linking whereas "-lpgmp"
is not added on jade.  As one can see by using any simple C program and
using the "-v" option, for example,

cc -v -o tst.exe tst.c > ttt.tmp 2>&1

On garnet, doing the same command shows that both  "-lpgc" and "-lpgmp"
are added.  But also, doing the above compile and linking on garnet
does not result in an error message.  Now for the 'additional
consideration'; as per the follow-up request "Can you provide
the error output during linking?"

/opt/pgi/10.6.0/linux86-64/10.6/lib/libpgmp.a(setaff.o): In function `_mp_malloc_local':
setaff.c:(.text+0x116): multiple definition of `_mp_malloc_local'
/opt/pgi/10.6.0/linux86-64/10.6/lib/libpgc.a(init_dummy2.o):init_dummy2.c:(.text+0x0): first defined here
/opt/pgi/10.6.0/linux86-64/10.6/lib/libpgmp.a(barrier.o): In function `_mp_lcpu3':
barrier.c:(.text+0x31): multiple definition of `_mp_lcpu3'
/opt/pgi/10.6.0/linux86-64/10.6/lib/libpgc.a(barrier_ser.o):barrier_ser.c:(.text+0x0): first defined here
/opt/pgi/10.6.0/linux86-64/10.6/lib/libpgmp.a(barrier.o): In function `_mp_lcpu2'
similar problems for 
_mp_lcpu2 _mp_init _mp_get_tcpus_max _mp_get_tcpus _mp_get_par
_mp_get_par3 _mp_get_actnestlvl _mp_get_teamsz _mp_get_anthrdnum

The following confirms the duplicate definitions
scheinin@garnet03:..10.6/lib> nm libpgc.a | grep _mp_init
000000000000007d T _mp_init
scheinin@garnet03:..10.6/lib> nm libpgmp.a  | grep _mp_init
0000000000001222 T _mp_init

So, while using both  "-lpgc" and "-lpgmp"  does not always create
a conflict, it can create a conflict and for certain symbols.
Moreover, it seems that having both "-lpgc" and "-lpgmp" is inserted
by the cc wrapper.



Dear Alan Scheinine,

A comment has been added to your case # 42214: PGI libraries and ftn libraries.  You can view and update the case via the Cray Case Management Tool: http://crayport.cray.com/SFDCLogin/SFDCLogin.aspx

Thank you,
Cray Customer Support

New Case Comment:
Alan,

"An application, esmf-4.0.0R, uses a variable supplied by PGI, called DEFSTDLIBS, which includes "-lpgc" which is normal. However, on the XE garnet the cc compiler wrapper addes the library -lpgmp . But libpgc and libpgmp define the same symbols and cause linking to fail."

I'm assuming your preference is to use -lpgc to provide the symbols? 

Can you provide the error output during linking?

Thanks,

Jeremy
delete above after closing problem on CrayPort

 -----------------------------
Spring 2011 Newsletter

Greetings Everyone:

1) The ESMF off-line parallel regridding tool has a rapidly growing user base.  It reads netCDF grid files in several formats and produces a netCDF file of interpolation weights.  It is very fast, portable, and robust, and can generate large weight files in minutes instead of hours.  Logically rectangular and unstructured grids are supported (hexagonal grids are a new addition), and it can operate on regional or global grids.  It includes bilinear, higher order finite element patch recovery, and conservative interpolation methods.  Documentation is at:
http://www.earthsystemmodeling.org/esmf_releases/non_public/ESMF_5_2_0/ESMF_refdoc/node3.html#SECTION03020000000000000000

The methods offered through this utility can also be accessed through a calling interface that can be integrated into models.  These methods can be used independently of ESMF component constructs.
Download ESMF release 5.2.0 to try the off-line regridding tool at:
http://www.earthsystemmodeling.org/download/releases.shtml
Please contact esmf_support@list.woc.noaa.gov with any questions.

2) Backward compatible interfaces are coming!  Backward compatibility will be initiated with the next public release of ESMF, 5.2.0r, scheduled for May 2011.  This important step will help ensure that future releases of the software do not break existing code that uses the library.  About 80% of the ESMF methods will have this guarantee.  In preparation, the ESMF team has been engaged in reviewing the full application programming interface for consistency.  Internal release 5.2.0, delivered in February 2011, is a first look at the standardized version.  For download, release notes, and known bugs:
http://www.earthsystemmodeling.org/download/releases.shtml

3) Recent internal releases of ESMF include a prototype compliance checker, developed in collaboration with the National Unified Operational Prediction Capability (NUOPC).  This is a run-time tool that can be linked into an ESMF system to check that metadata, timekeeping, and other interoperability conventions are followed.  It provides a remarkable amount of information about the code with very little effort on the part of the user, and once turned off imposes no performance overhead on production systems.  It is activated by setting the runtime environment variable ESMF_RUNTIME_COMPLIANCECHECK=ON. The compliance checker is currently geared toward NUOPC conventions.  For more information go to http://www.earthsystemmodeling.org <http://www.earthsystemmodeling.org/> , click on the "Work Plans" tab, click on "NUOPC plans" in the left navigation bar, and select "NUOPC Layer: ESMF Compliance Checker" under Reference Manuals.
(Follow the directions to get ESMF 5.2.0, above, if you'd like to try
it.)

4) Slides from the ESMF Town Hall meeting at Fall AGU are available at:
http://www.earthsystemmodeling.org/presentations/pres_1012_townhall.ppt
This presentation offers an excellent and comprehensive overview of the ESMF software.

***********************************
Sylvia Murphy
NESII/CIRES/NOAA Earth System Research Laboratory
325 Broadway, Boulder CO 80305
Email: sylvia.murphy@noaa.gov
Phone: 303-497-7753
Fax: 303-497-7649


