
armstrong
Wed Oct 29 22:42:58 CDT 2014

At request of Hank Happ hhapp@ara.com and
Darwin Adams darwin.adams.ctr@us.af.mil

mkdir $HOME/app
export APPDIR=$HOME/app
module swap PrgEnv-cray PrgEnv-pgi
# Use compiler pgi/14.2.0 , NOT THE DEFAULT ,
# because pgi/14.3.0 is missing library libaccapid.so .
# Both pgi/14.2.0 and also pgi/14.7.0 have libaccapid.so .
module swap pgi/14.3.0 pgi/14.2.0
module load cray-mpich-compat/v7

SILO with szip and HDF5
mkdir $APPDIR/szip
mkdir $APPDIR/szip/2.1-pgi
cd $APPDIR/szip/2.1-pgi
mkdir src
cd src
wget http://www.hdfgroup.org/ftp/lib-external/szip/2.1/src/szip-2.1.tar.gz
tar xzf szip-2.1.tar.gz
cd szip-2.1

export CXX=pgCC
export CC=pgcc
export FC=pgf90
export F77=pgf77
export F90=pgf90

export CFLAGS="-fPIC"
export FFLAGS="-fPIC"
export CXXFLAGS="-fPIC"
export LDFLAGS=""

export PREFIX=$APPDIR/szip/2.1-pgi

./configure --prefix=$PREFIX \
  --enable-shared  --enable-static

make 2>&1 | tee make.log
make check 2>&1 | tee check.log
make install
make clean

topdir=$PREFIX
cd $topdir
# Look carefully at what is actual current directory before
# making changes of permission.
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
chmod -R o-w *

mkdir $APPDIR/silo
mkdir $APPDIR/silo/4.10.2-pgi
cd $APPDIR/silo/4.10.2-pgi
mkdir src
cd src

wget --no-check-certificate https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/silo-4.10.2-bsd.tar.gz
wget --no-check-certificate https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/silo-4.10.2-bsd-smalltest.tar.gz

# Not the default cray-hdf5/1.8.12 because it was compiled with PGI 12.1
# Note that pgi/14.3.0 is not compatible with cray-hdf5/1.8.13,
# above swapped in pgi/14.2.0
module load cray-hdf5/1.8.13
# Next line not really needed for serial version
# In general, for parallel modules added, need to again load cray-mpich-compat
module load cray-mpich-compat/v7

# New value for PREFIX
export PREFIX=$APPDIR/silo/4.10.2-pgi

export CC=pgcc
export CPPFLAGS="-I${APPDIR}/szip/2.1-pgi/include -I${HDF5_ROOT}/include"
export CFLAGS="-O2 -fPIC"
export F90=pgf90
export FC=$F90
export F77=$F90
export FPPFLAGS="-O2 -fPIC"
export FCFLAGS=-O2
export FFLAGS=-O2
export CXX=pgCC
export CXXFLAGS="-O2 -fPIC"
export LIBS="-lsz -lhdf5 -lhdf5_hl -lhdf5_fortran -lhdf5hl_fortran"
export LDFLAGS="-L${APPDIR}/szip/2.1-pgi/lib -L${HDF5_ROOT}/lib"

export LD_LIBRARY_PATH=${APPDIR}/szip/2.1-pgi/lib:${HDF5_ROOT}/lib:$LD_LIBRARY_PATH

mkdir ${WORKDIR}/tmp
export TMPDIR=${WORKDIR}/tmp

# In directory $APPDIR/silo/4.10.2-pgi/src
tar xzf silo-4.10.2-bsd.tar.gz
cd silo-4.10.2-bsd

 ./configure --prefix=$PREFIX  \
 -with-hdf5=${HDF5_ROOT}/include,${HDF5_ROOT}/lib \
  --with-zlib=/usr/include,/usr/lib64 \
  --with-szlib=${APPDIR}/szip/2.1-pgi/lib \
  --disable-silex \
  --enable-shared --enable-static \
  --enable-fortran

                       Browser @UsingBrowser@
                       Readline @UsingReadline@
                           HDF5 @UsingHDF5@
                          Silex @UsingSilex@
                             Qt @UsingQt@
                Qt moc Compiler 
                    Qt CXXFLAGS 
                        Qt LIBS 
                         Python @UsingPython@

make 2>&1 | tee make.log

cd tests
make check 2>&1 | tee check.log
There were errors, which I think are due to C++ dialect.

"/opt/pgi/14.2.0/linux86-64/14.2/include/CC/cmath", line 64: error: the global
          scope has no "abs"
  using _STLP_VENDOR_CSTD::abs;
                           ^
"./rocket.h", line 132: error: class "std::map<std::string, unsigned long
          long, std::less<std::string>, std::allocator<std::pair<const
          std::string, unsigned long long>>>" has no member "at"
              const unsigned long long mask = class_masks.at(cname);
                                                          ^

make install
make clean

topdir=$PREFIX
cd $topdir
# Look carefully at what is actual current directory before
# making changes of permission.
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
chmod -R o-w *

UDUNITS as prerequisite for ncarg

mkdir -p $APPDIR/udunits/2.2.17-pgi/src
cd $APPDIR/udunits/2.2.17-pgi/src

wget ftp://ftp.unidata.ucar.edu/pub/udunits/udunits-2.2.17.tar.gz

# Note, new PREFIX
export PREFIX=$APPDIR/udunits/2.2.17-pgi

export CXX=pgCC
export CC=pgcc
export FC=pgf90
export F77=pgf77
export F90=pgf90
export TMPDIR=${WORKDIR}/tmp

tar xzf udunits-2.2.17.tar.gz
cd udunits-2.2.17

./configure --prefix=$PREFIX \
  --enable-shared  --enable-static

make 2>&1 | tee make.log
make install
make clean

topdir=$PREFIX
cd $topdir
# Look carefully at what is actual current directory before
# making changes of permission.
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
chmod -R o-w *

NCARG

https://www.earthsystemgrid.org/
Near bottom of page there is item called
NCL: NCAR Command Language

Compile for login nodes rather than compute nodes because
it is graphics.

mkdir -p $APPDIR/ncl_ncarg/6.2.1-pgi/src
cd $APPDIR/ncl_ncarg/6.2.1-pgi/src
got ncl_ncarg-6.2.1.tar.gz from web page

tar xzf ncl_ncarg-6.2.1.tar.gz
cd ncl_ncarg-6.2.1

# Let us review modules already loaded.
module swap PrgEnv-cray PrgEnv-pgi
module swap pgi/13.6.0 pgi/14.2.0
module load cray-hdf5/1.8.13
# New module load not already done is cray-netcdf
# use cray-netcdf/4.3.2 , not the default,
# because 4.3.2 was compiled with PGI 14.
module load cray-netcdf/4.3.2
# Just in case
module load cray-mpich-compat/v7

# Environment variable NCARG is source and
# NCARG_ROOT is the installation location that users need to set.
# Do not need PREFIX but just in case some script of NCARG
# uses PREFIX, do not leave it as old value (e.g. for udunits).
export PREFIX=$APPDIR/ncl_ncarg/6.2.1-pgi
export NCARG=$APPDIR/ncl_ncarg/6.2.1-pgi/src/ncl_ncarg-6.2.1
export NCARG_ROOT=$PREFIX

# If not already done
export CXX=pgCC
export CC=pgcc
export FC=pgf90
export F77=pgf77
export F90=pgf90
export TMPDIR=${WORKDIR}/tmp

export LD_LIBRARY_PATH=${APPDIR}/szip/2.1-pgi/lib:${HDF5_ROOT}/lib:${APPDIR}/udunits/2.2.17-pgi/lib:${NETCDF_DIR}/lib:$LD_LIBRARY_PATH

cd $NCARG/config
make -f Makefile.ini
./ymake -config `pwd`

grep SYSTEM_INCLUDE Makefile
SYSTEM_INCLUDE          = "LINUX"

# This really should be LINUX.64.PGI
# but just do the following.
mv LINUX LINUX_original
cp LINUX.64.PGI LINUX

Edit Project
Because even the "devel" version of PNG,
does not have libpng12.a, so skip it.

change from
#define	PNGlib	-lpng -lz
change to
#define	PNGlib	-lz

Edit Template

change from
#define XLibrary -lX11
change to
#define XLibrary -lX11 -lxcb -lxcb-xlib -lXau  -ldl

Edit LINUX

#define CtoFLibraries -lpgf90  -lpgf90_rpm1  -lpgf902 -lpgftnrtl -lpghpf -lrt -lsz
/*
#define CtoFLibraries -L/usr/pgi/linux86-64/12.9/lib  -lpgmp -lnuma -lpthread -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl -lnspgc -lpgc -lrt -lpthread -lm
#define CtoFLibraries -pgf90libs
*/
#define CtoFLibrariesUser -lpgf90  -lpgf90_rpm1  -lpgf902 -lpgftnrtl -lpghpf -lrt -lsz
/*
#define CtoFLibrariesUser -pgf90libs
*/

# Note that previously above included  -lpgc  but that now conflicts with
# -lpgmp that is added by cc compiler.

# Note that the symbol aio_return is not defined in
# /usr/lib64/libaio.a but rather
# it is defined in /usr/lib64/librt.a .

#define LibSearchUser -L/usr/lib64
#define IncSearchUser -I/usr/include/X11

#define ArchRecLibSearch -L/usr/lib64
#define ArchRecIncSearch -I/usr/include/X11

Add
#define XawLibrary  -lXaw8

Change to
#define XToolLibrary -lXt -lXpm -lSM -lICE -lxcb

End of editing of LINUX


cd ..
./Configure -v

Build NCL (y)? y
Parent installation directory : /p/home/scheinin/app/ncl_ncarg/6.2.1-pgi
System temp space directory   : /p/work1/scheinin/tmp
Build NetCDF4 feature support (optional)? (y)
Requires the NetCDF version 4.1.2 or later.   > n
Build HDF4 support (optional) into NCL? (y)
Informational note: HDF4 is no longer required to build NCL,
but it is a prerequisite if you need HDF-EOS2 support.
(Requires external HDF-4 libraries)         > n
Also build HDF4 support (optional) into raster library? n
Build Triangle support (optional) into NCL? n
Build NetCDF-4 support (optional) into NCL? y
Build OPeNDAP support (optional) into NCL? n
Build GDAL support (optional) into NCL? n
Build Udunits support (optional) into NCL? y
Build HDF5 support (optional) into NCL? y
Build Vis5d+ support (optional) into NCL? n
Build HDFEOS support (optional) into NCL? n
Build GRIB2 support (optional) into NCL? n
Enter local library search path(s) : /usr/lib64 /opt/cray/hdf5/1.8.13/PGI/141/lib /opt/cray/netcdf/4.3.2/PGI/141/lib /p/home/scheinin/app/szip/2.1-pgi/lib /p/home/scheinin/app/udunits/2.2.17-pgi/lib
Enter local include search path(s) : /usr/include /usr/include/X11 /opt/cray/hdf5/1.8.13/PGI/141/include /opt/cray/netcdf/4.3.2/PGI/141/include /p/home/scheinin/app/szip/2.1-pgi/include /p/home/scheinin/app/udunits/2.2.17-pgi/include

 make Everything 2>&1 | tee make.log

# To continue if compiled only partially
make All 2>&1 | tee -a make.log
make install 2>&1 | tee -a make.log

topdir=$NCARG_ROOT
cd $topdir
# Look carefully at what is actual current directory before
# making changes of permission.
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
chmod -R o-w *

