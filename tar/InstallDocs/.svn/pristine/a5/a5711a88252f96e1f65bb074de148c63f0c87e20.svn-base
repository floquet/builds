
MKL should provide an optimized Scalapack for SGI MPI but
it is not available in version
/opt/intel/Compiler/11.1/046/mkl/lib/em64t

More precisely, Scalapack uses BLACS and the user must choose
between 
/opt/intel/mkl/10.2.0.013/lib/em64t/libmkl_blacs_intelmpi_lp64.a
/opt/intel/mkl/10.2.0.013/lib/em64t/libmkl_blacs_lp64.a
/opt/intel/mkl/10.2.0.013/lib/em64t/libmkl_blacs_openmpi_lp64.a
/opt/intel/mkl/10.2.0.013/lib/em64t/libmkl_blacs_sgimpt_lp64.a

All of the above have `Cdsendrecv' and `MKL_SCALAPACK_INT'
EXCEPT libmkl_blacs_sgimpt_lp64.a , but this is what we would
want to use for SGI MPI.

Using Google I (Alan Scheinine) found a message on an Intel Forum
that confirmed the existance of the problem.
The date was around September 2009.
   Hello, I am evaluating the latest Intel Compiler suite. I am
   trying to link my program with latest MKL implmentation on a SGI
   workstation with xeon processor. I am having  the following error:
     /opt/intel/Compiler/11.1/046/mkl/lib/em64t/libmkl_scalapack_lp64.so:
     undefined reference to `MKL_SCALAPACK_INT'
     /opt/intel/Compiler/11.1/046/mkl/lib/em64t/libmkl_scalapack_lp64.so:
     undefined reference to `Cdsendrecv'

   I trace the problem back to the blacs implementation: I am using
   SGI's MPT library, so I uses libmkl_blacs_sgimpt_lp64.a library.
   For all blacs libraries, only the sgimpt version does not have
   MKL_SCALAPACK_INT defined. How do I get my program to link correctly?

Todd Rosenquist of Intel replies
   The problem has been reproduced.  We'll provide a fix for this
   in a future update.
   You could try this workaround: Compile a C source file with these
   two lines and link it in addition to MKL:
      #include <mpi.h>
      int MKL_SCALAPACK_INT = (int) MPI_INT;

I tried the suggestion and it solved the missing constant.  However,
the reply by Mr. Rosenquist did not provide a solution for the
missing `Cdsendrecv' and I was not able to find it defined anywhere.

So I compiled BLACS and SCALAPACK using the Intel Compiler and SGI MPI.
I used the BLAS and LAPACK in MKL.

The procedure is shown below.

Use default:
> module list
Currently Loaded Modulefiles:
  1) compilers/intel11.1   2) mpi/sgi_mpi-1.26
Added
module load compilers/mkl_10.2.0

In directory /usr/local/usp/scalapack/BLACS/
make lib/ src/

cd /usr/local/usp/scalapack/1.8.0
mkdir lib include bin src

tar xzf scalapack.tgz
results in directory scalapack-1.8.0

cd scalapack-1.8.0

Need BLAS, BLACSi and LAPACK

/usr/local/usp/scalapack/BLACS/lib
   blacsCinit_MPI-MPT-0.a  blacsF77init_MPI-MPT-0.a  blacs_MPI-MPT-0.a

Compiling scalapack because
/opt/intel/mkl/10.2.0.013/lib/em64t/libmkl_blacs_sgimpt_lp64.a
is missing a routine and a constant definition.

For BLAS will use /opt/intel/mkl/10.2.0.013/lib/em64t/
libmkl_blas95_lp64.a

For LAPACK will use /opt/intel/mkl/10.2.0.013/lib/em64t/
libmkl_lapack95_lp64.a

SLmake.inc
Cannot use -ipo when compiling libraries, in order to avoid the error
/usr/local/usp/scalapack/1.8.0/src/scalapack-1.8.0/libscalapack.a
is an archive, but has no symbols

make  2>&1 | tee make.log

# To make executables for testing.
make exe 2>&1 | tee make_exe.log

qsub -A  erdcssta -q standard -l select=8:ncpus=8:mpiprocs=8,place=scatter:excl,walltime=1:00:00 -I

module load compilers/mkl_10.2.0

cd /usr/local/usp/scalapack/1.8.0/src/scalapack-1.8.0/TESTING

export MPI_GROUP_MAX=1024

./run.pl  2>&1 | tee run.log

All tests in TESTING directory were run with 4, 16 and 64 processes.

No tests reported as failing.
However, a few tests had the following message:
 48 tests skipped because of illegal input values.

Despite no declaration of failure, a few tests elicited the message
   MPI: WARNING: linking of rank 0 to a cpu failed
and more importantly, for some tests with 64 processes there
were one of the following error messages
   MKL ERROR: Parameter 6 was incorrect on entry to ZGEMV
   MKL ERROR: Parameter 6 was incorrect on entry to CGEMV
   MKL ERROR: Parameter 6 was incorrect on entry to DGEMV

cp libscalapack.a ../../lib
Destination was directory /usr/local/usp/scalapack/1.8.0/lib/ .
cp SRC/*.h ../../include

make clean
