espresso:x:22353:22353:Dr. Scott A. Kajihara (Contractor),APP/CTR/USA,Lockheed Martin,(937) 904-8304:/app/espresso:/bin/csh
Scott.Kajihara.ctr@us.af.mil
 ==================================================


For SGI type machine
see /home/scheinin/InstallDocs/QuantumEspresso/INSTALL_qe_diamond
Only SGI now is spirit.afrl.hpc.mil

See section 2 of user's guide for installation instructions

 ==================================================

# Installation of Quantum Espresso 5.0.2 on Copper/Chugach.
# This is a rebuild with "-pgi" in the name.
# E. Kornkven
# January 8, 2013


#
# To build using PGI compilers (see notes from CSCS below)
time ./build_espresso_pgi.sh 2>&1 | tee build.log

#
######################################


#####   Set permissions   #####
    package=espresso
    version=5.0.2-pgi

# Application file permissions
    cd /usr/local/usp/${package}/${version}     # To confirm variable settings
    chmod -R go+rX /usr/local/usp/${package}/${version}
    chmod -R o-rwx /usr/local/usp/${package}/${version}/wrk
    chmod    755   /usr/local/usp/${package}

    /bin/chgrp -Rh software /usr/local/usp/${package}/${version}
    (instead of:)
        sudo /bin/chown -Rh cots:software /usr/local/usp/${package}/${version}

# Module files permissions
    cd /usr/local/usp/modulefiles/${package}    # To confirm settings
    chmod go+rX /usr/local/usp/modulefiles/${package}
    chmod go+rX /usr/local/usp/modulefiles/${package}/${version}
    chmod go+rX /usr/local/usp/modulefiles/${package}/.version
    /bin/chgrp -Rh software /usr/local/usp/modulefiles/${package}


#
#####################################
#####################################

#
#####     To test     #####

# Chugach
qsub -A ERDCS97290STA -I -l ncpus=32,walltime=1:00:00 -q debug                  
    
# Copper
qsub -A ERDCS97290STA -I -l select=1:ncpus=32:mpiprocs=32,walltime=1:00:00 -q de
bug 

#
# Make sure /usr/local/usp/espresso/5.0.2-pgi/espresso-5.0.2/environment_variabl
es
# has been edited for this machine.

# (on a compute node)
cd $PBS_O_WORKDIR/espresso-5.0.2/PW/examples/example10
export OMP_NUM_THREADS=1
time ./run_example 2>&1 | tee run_example.out

#
# Expected outcome of example10
  ## I think IEEE warnings may be ignored -- they are produced by PGI when a STO
P
  ## is hit and numeric conditions occurred during execution.
  ## Execution time on 32 Copper processors
  real    3m29.67s
  user    0m2.45s
  sys     0m0.15s
  ## Execution time on 32 Chugach processors
  real    1m55.73s
  user    0m1.44s
  sys     0m0.14s

 ---------------------

build_espresso_pgi.sh file contains

#!/bin/bash

# Installation of Quantum Espresso 5.0.2 on Copper/Chugach.
# E. Kornkven
# January 8, 2013

 --------------

file INSTALL.qe

3. Example scripts 

This script run pw.x over 6400 cores (800 MPI, 8 MPI per node, 4
OMP per MPI thread). The flag ""

#SBATCH --job-name="QE-BENCH-SPIGA"
#SBATCH --nodes=200
#SBATCH --ntasks-per-node=8
#SBATCH --cpus-per-task=4
#SBATCH --time=06:00:00
#SBATCH --output=QE-BENCH.%j.o
#SBATCH --error=QE-BENCH.%j.e
#SBATCH --account=<...>

export OMP_NUM_THREADS=4
aprun -n $SLURM_NPROCS -N 8 -d 4 -S 2 ./pw.x -input SiGe25.in -npool 4 | tee out


This script run pw.x over 6400 cores (800 MPI, 4 MPI per node, 8
OMP per MPI thread).

#!/bin/bash
#SBATCH --job-name="QE-BENCH-SPIGA"
#SBATCH --nodes=200
#SBATCH --ntasks-per-node=4
#SBATCH --cpus-per-task=8
#SBATCH --time=06:00:00
#SBATCH --output=QE-BENCH.%j.o
#SBATCH --error=QE-BENCH.%j.e
#SBATCH --account=<...>

export OMP_NUM_THREADS=8
aprun -n $SLURM_NPROCS -N 4 -d 8 -S 1./pw.x -input SiGe25.in -npool 4 | tee out


The flag "-S" is the number of MPI tasks per NUMA node. Each XE6 nodes 
contains 2 x 16-core CPU, 4 NUMA nodes  in total. The value of "-S" has 
to change according to the combination MPIxOMP in the node:

-N 8 -d 4 --> -S 2 (because there are 8 MPI to distribute across 4 NUMA nodes)
-N 4 -d 8 --> -S 1 (because there are 4 MPI to distribute across 4 NUMA nodes)


NOTE (1): "-S" is optional. The resource manager should be enough smart to
      place the MPi processes in the right place but I never double-check
      
NOTE (2): other two useful options for aprun are:

-ss	(Optional) Demands strict memory containment per NUMA node. 

-cc	(Optional) Controls how tasks are bound to cores and NUMA nodes. 
               The recommend setting for most codes is -cc cpu which restricts 
               each task to run on a specific core. 
               
          Try and use them wisely.
 
 -----------------------------------

In addition to wannier90-1.2 that garnet has,
spirit has
drwxr-xr-x  8 espresso espresso 4096 Sep 24  2013 ActiveTcl8.4.20
drwxr-xr-x  9 espresso espresso 4096 Sep 24  2013 PWgui-5.0.2
drwxr-xr-x 11 espresso espresso 4096 Sep 19  2013 XCrySDen-1.5.53

 -----------------------------------

WanT
List of all plug-ins at http://www.quantum-espresso.org/tools
Download includes want-base, want-plugins and vdW-WF

want-2.5.0-base.tar.gz
want-2.5.0-plugins.tar.gz
vdW-WF_v1.0.1.tgz

plugins puts files into want-2.5.0
Directory want-2.5.0/plugins
has vdW-WF_v1.0.tgz
download was vdW-WF_v1.0.1.tgz

There is no "make install" so may need to build in PREFIX.

export PREFIX=/usr/local/usp/espresso/want-2.5.0
mkdir $PREFIX

export BUILD_DIR=/u/scheinin/build/want-2.5.0
mkdir $BUILD_DIR
# Get tar files.

cd /usr/local/usp/espresso
tar xzf ${BUILD_DIR}/want-2.5.0-base.tar.gz
ls want-2.5.0/plugins
tar xzf ${BUILD_DIR}/want-2.5.0-plugins.tar.gz
ls want-2.5.0/plugins
cp ${BUILD_DIR}/vdW-WF_v1.0.1.tgz want-2.5.0/plugins/archive/

cd $PREFIX

Installation instructions in want-2.5.0/docs/README.install

export CC="cc"
export FC="ftn"
export F77="ftn"
export F90="ftn"
export CXX="CC"
export MPICC="cc"
export MPIF90="ftn"

export CFLAGS="-mp=nonuma -fastsse -Mipa=fast,inline"
export CXXFLAGS="-mp=nonuma -fastsse -Mipa=fast,inline"

module load cray-netcdf/4.3.2
module swap cray-libsci/12.1.00 cray-libsci/13.0.1
module load fftw/3.3.4.1
module load PrgEnv-test

export LIBDIRS="${NETCDF_DIR}/lib ${CRAY_LIBSCI_PREFIX_DIR}/lib ${FFTW_DIR}"
export NETCDF_LIBS"-L${NETCDF_DIR}/lib -lnetcdf -lnetcdff"
export LAPACK_LIBS="-L${CRAY_LIBSCI_PREFIX_DIR}/lib -lsci_pgi_mpi_mp -lsci_pgi_mp"
export BLAS_LIBS="-L${CRAY_LIBSCI_PREFIX_DIR}/lib -lsci_pgi_mpi_mp -lsci_pgi_mp"

./configure \
 --enable-parallel --enable-openmp \
 --with-scalapack --with-netcdf

Anyway set NetCDF to internal
NETCDF_LIBS=-L/u/scheinin/build/want-2.5.0/want-2.5.0/plugins/netcdf/lib -lnetcdf
In make.sys DFLAGS includes -D__FFTW but no variable
as to where it would be found.

Edit want-2.5.0/src/transport/Makefile
add to WANNIER_OBJS= \
../wannier/radial_grids.o \
../wannier/pseudo_types.o \
Do the same for want-2.5.0/src/embed/Makefile
Edit want-2.5.0/src/tools/Makefile
add to WANNIER_OBJS= \
../wannier/postproc_init.o \
Edit want-2.5.0/src/tools/decay.f90
add near top
  ! do not define iargc as external: g95 does not like it
  INTEGER             :: iargc

make all 2>&1 | tee make_all.log

Expect to find
 disentangle.x wannier.x bands.x plot.x blc2wan.x conductor.x kgrid.x midpoint.x
All put into bin/ as symbolic links.

If last two are not in src/tools or not found,
then try make tools.

# Some of the below may have already been done by "make all"
# though the instructions do not explain that.
# After make all there is ./src/baselib/libwant.a
make libwant 2>&1 | tee make_libwant.log
make libclib 2>&1 | tee make_libclib.log
make libplugins 2>&1 | tee make_libplugins.log

The optional features etsf-io and vdW-WF were not built.

Fix permissions.


 -----------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


http://www.quantum-espresso.org/download/
has a "download page" link

Extra packages are automatically downloaded on demand after
the base distribution.

See section 2 of user's guide for installation instructions
http://www.quantum-espresso.org/wp-content/uploads/Doc/user_guide/node7.html

 =================== spirit below ===================

http://www.quantum-espresso.org/download/
has a "download page" link

extra packages are automatically downloaded on demand after
the base distribution

Feb. 27, 2015
spirit.afrl.hpc.mil
Built in my HOME directory as an exercise.

scalapack example
mpif90 -o a.out_scalapack scalapack_exp1.f \
  -lmkl_scalapack_lp64 -lmkl_blacs_sgimpt_lp64 \
  -lmkl_core -lmkl_intel_lp64 \
  -lmkl_lapack95_lp64 -lmkl_sequential
mpiexec_mpt -n 6 ./a.out_scalapack



intelmpi module compiles with  mpiifort mpiicc
mpt module compiles with mpif90 mpicc


example in user guide is to run program using
mpiexec_mpt -np #
and to compile using ifort and icc icpc  with -lmpi
though there is also /opt/sgi/mpt/mpt-2.11/bin/mpicc

If mpt is SGI, why does scalapack work and why  does it not
work in my old notes.


# Downloaded espresso-5.1.1.tar.gz

Alternate SGI MPT below

export PREFIX=/home/scheinin/espresso/5.1.1-altmpt

modules
(
module swap intel-compilers/12.1.0 intel-compilers/14.0.2
)
intel-compilers/14.0.2
mpt/2.11

export CC=icc
export FC=ifort
export F77=ifort
export F90=ifort
export CXX=icpc
export MPICC=icc
export MPIF90=ifort

export CFLAGS="-O2 -openmp"
export CXXFLAGS="-O2 -openmp"
export FFLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"
export F90FLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"
export FCFLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"

export CPPFLAGS="-I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"

export LDFLAGS="-L/opt/sgi/mpt/mpt-2.11/lib -L/app/intel/composerxe/mkl/lib/intel64 -openmp"

export LIBS="-lmpi -Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_sgimpt_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

export BLAS_LIBS="-lmkl_intel_lp64  -lmkl_sequential -lmkl_core"

export SCALAPACK_LIBS="-Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_sgimpt_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

./configure --enable-parallel --enable-openmp --with-scalapack=intel

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

# Testing

Alternate SGI MPT above
 -------------------------------------------------------------
SGI MPT below

export PREFIX=/home/scheinin/espresso/5.1.1-sgimpt

modules
(module swap intel-compilers/12.1.0 intel-compilers/14.0.2)
intel-compilers/14.0.2
mpt/2.11

export CC=mpicc
export FC=mpif90
export F77=ifort
export F90=mpif90
export CXX=mpicxx
export MPICC=mpicc
export MPIF90=mpif90

export CFLAGS="-O2 -openmp"
export CXXFLAGS="-O2 -openmp"
export FFLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"
export F90FLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"
export FCFLAGS="-O2 -openmp -I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"

export CPPFLAGS="-I/opt/sgi/mpt/mpt-2.11/include -I/app/intel/composerxe/mkl/include"

export LDFLAGS="-L/opt/sgi/mpt/mpt-2.11/lib -L/app/intel/composerxe/mkl/lib/intel64 -openmp"

export LIBS="-Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_sgimpt_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

export BLAS_LIBS="-lmkl_intel_lp64  -lmkl_sequential -lmkl_core"

export SCALAPACK_LIBS="-Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_sgimpt_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

./configure --enable-parallel --enable-openmp --with-scalapack=intel

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

# Testing
# Do testing using src executables rather than
# install directory $PREFIX.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mkdir $WORKDIR/tmp/espressompt
# Edit $PREFIX/src/espresso-5.1.1/environment_variables
# Note, different PREFIX in file environment_variables
PREFIX=/home/scheinin/espresso/5.1.1-sgimpt/src/espresso-5.1.1
BIN_DIR=$PREFIX/bin
PSEUDO_DIR=$PREFIX/pseudo
# Beware: everything in $TMP_DIR will be destroyed !
TMP_DIR=/workspace/scheinin/tmp/espressompt
PARA_PREFIX="mpiexec_mpt -n 4" <<<<<<<<<<<<<<<<<<<<<<<<<< not mpirun
PARA_POSTFIX=" "

export PREFIX=/usr/local/usp/espresso/5.1.1-pgi-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
# Modify check-pw.x.j around line 244 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-pw.x.j
cd CPV/tests/
# Modify check-cp.x.j around line 206 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-cp.x.j
qsub -l ncpus=16,walltime=1:00:00 -A ERDCS97290STA -q debug -I
module swap intel-compilers/12.1.0 intel-compilers/14.0.2
export PREFIX=/home/scheinin/espresso/5.1.1-sgimpt
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
./check-pw.x.j
   Tests OK  (Did not do all tests due to debug queue limit of one hour.)
cd CPV/tests/
./check-cp.x.j
   Segmentation fault for all four test types.
   Intel version of tests did not fail.

SGI MPT above
 -------------------------------------------------------------
Intel MPI below
export PREFIX=/home/scheinin/espresso/5.1.1-intelmpi

modules
(
module unload mpt/2.11
module swap intel-compilers/12.1.0 intel-compilers/14.0.2
module load intelmpi/4.1.3.048
)
intel-compilers/14.0.2
intelmpi/4.1.3.048

export CC=mpiicc
export FC=mpiifort
export F77=ifort
export F90=mpiifort
export CXX=mpiicpc
export MPICC=mpiicc
export MPIF90=mpiifort

export CFLAGS="-O2 -openmp"
export CXXFLAGS="-O2 -openmp"
export FFLAGS="-O2 -openmp -I/app/intel/impi/4.1.3.048/include -I/app/intel/composerxe/mkl/include"
export F90FLAGS="-O2 -openmp -I/app/intel/impi/4.1.3.048/include -I/app/intel/composerxe/mkl/include"
export FCFLAGS="-O2 -openmp -I/app/intel/impi/4.1.3.048/include -I/app/intel/composerxe/mkl/include"

export CPPFLAGS="-I/app/intel/impi/4.1.3.048/include -I/app/intel/composerxe/mkl/include"

export LDFLAGS="-L/app/intel/impi/4.1.3.048/lib64 -L/app/intel/composerxe/mkl/lib/intel64 -openmp"

export LIBS="-Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

export BLAS_LIBS="-lmkl_intel_lp64  -lmkl_sequential -lmkl_core"

export SCALAPACK_LIBS="-Wl,--start-group -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_lapack95_lp64 -lmkl_intel_lp64  -lmkl_sequential -lmkl_core -Wl,--end-group"

./configure --enable-parallel --enable-openmp --with-scalapack=intel

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

Intel MPI above

 =================== spirit above ===================
 =================== garnet below ===================

http://www.quantum-espresso.org/download/
has a "download page" link

extra packages are automatically downloaded on demand after
the base distribution

Feb. 20, 2015
garnet.erdc.hpc.mil

# Downloaded espresso-5.1.1.tar.gz

PGI below

export PREFIX=/usr/local/usp/espresso/5.1.1-pgi-cc
# Use most recent modules.  Should include fftw.
source /p/cwfs/scheinin/pub/module_update/module_update_pgi.sh
module unload atp

cd $PREFIX/src
tar xzf espresso-5.1.1.tar.gz
cd espresso-5.1.1

export CC="cc"
export FC="ftn"
export F77="ftn"
export F90="ftn"
export CXX="CC"
export MPICC="cc"
export MPIF90="ftn"

export CFLAGS="-O3 -mp=nonuma -fastsse -Mipa=fast,inline"
export CXXFLAGS="-O3 -mp=nonuma -fastsse -Mipa=fast,inline"
# If FFLAGS is any longer (with optimization),
# then the linking command has "-l ", which is a syntax error.
export FFLAGS="-O3 -mp=nonuma -Mpreprocess -Mcache_align -r8"
export F90FLAGS="-O3 -mp=nonuma -Mpreprocess -fastsse -Mipa=fast,inline -Mcache_align -r8"
export FCFLAGS="-O3 -mp=nonuma -Mpreprocess -fastsse -Mipa=fast,inline -Mcache_align -r8"

export ARCH=crayxt

./configure --enable-parallel --enable-openmp --with-scalapack \
 --disable-shared

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

# Testing
# Do testing using src executables rather than
# install directory $PREFIX.

mkdir $WORKDIR/tmp/espressopgi
# Edit $PREFIX/src/espresso-5.1.1/environment_variables
# Note, different PREFIX in file environment_variables
PREFIX=/usr/local/usp/espresso/5.1.1-pgi-cc/src/espresso-5.1.1
BIN_DIR=$PREFIX/bin
PSEUDO_DIR=$PREFIX/pseudo
# Beware: everything in $TMP_DIR will be destroyed !
TMP_DIR=/lustre/work1/scheinin/tmp/espressopgi
PARA_PREFIX="aprun -n 4"
PARA_POSTFIX=" "

export PREFIX=/usr/local/usp/espresso/5.1.1-pgi-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
# Modify check-pw.x.j around line 244 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-pw.x.j
cd CPV/tests/
# Modify check-cp.x.j around line 206 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-cp.x.j
qsub -l select=1:ncpus=32:mpiprocs=32,walltime=1:00:00 -A ERDCS97290STA \
 -q debug -I
export PREFIX=/usr/local/usp/espresso/5.1.1-pgi-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
./check-pw.x.j
   Tests OK  (Did not do all tests due to debug queue limit of one hour.)
cd CPV/tests/
./check-cp.x.j
   Segmentation fault for all four test types.
   Intel version of tests did not fail.

topdir=$PREFIX
cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *
# In each src/ directory
chmod -R o-rwx *

# Did not do because not yet sure installation is OK for users.
# chown -R cots.staff *

PGI above
   -------------------------
Intel below

export PREFIX=/usr/local/usp/espresso/5.1.1-intel-cc
# Use most recent modules.  Should include fftw.
source /p/cwfs/scheinin/pub/module_update/module_update_intel.sh
module unload atp

cd $PREFIX/src
tar xzf espresso-5.1.1.tar.gz
cd espresso-5.1.1

export CC="cc"
export FC="ftn"
export F77="ftn"
export F90="ftn"
export CXX="CC"
export MPICC="cc"
export MPIF90="ftn"

export CFLAGS="-O3 -openmp"
export CXXFLAGS="-O3 -openmp"
export FFLAGS="-O3 -openmp -assume byterecl"
export F90FLAGS="-O3 -openmp -nomodule"
export FCFLAGS="-O3 -openmp"
export FFLAGS_NOOPT="-O0 -assume byterecl -g -traceback"
export FFLAGS_NOMAIN="-nofor_main"

export ARCH=crayxt

./configure --enable-parallel --enable-openmp --with-scalapack \
 --disable-shared

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

# Testing
# Do testing using src executables rather than
# install directory $PREFIX.

mkdir $WORKDIR/tmp/espressointel
# Edit $PREFIX/src/espresso-5.1.1/environment_variables
# Note, different PREFIX in file environment_variables
PREFIX=/usr/local/usp/espresso/5.1.1-intel-cc/src/espresso-5.1.1
BIN_DIR=$PREFIX/bin
PSEUDO_DIR=$PREFIX/pseudo
# Beware: everything in $TMP_DIR will be destroyed !
TMP_DIR=/lustre/work1/scheinin/tmp/espressointel
PARA_PREFIX="aprun -n 4"
PARA_POSTFIX=" "

export PREFIX=/usr/local/usp/espresso/5.1.1-intel-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
# Modify check-pw.x.j around line 244 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-pw.x.j
cd CPV/tests/
# Modify check-cp.x.j around line 206 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-cp.x.j
qsub -l select=1:ncpus=32:mpiprocs=32,walltime=1:00:00 -A ERDCS97290STA \
 -q debug -I
export PREFIX=/usr/local/usp/espresso/5.1.1-intel-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
./check-pw.x.j
   Tests OK
cd CPV/tests/
./check-cp.x.j
   Tests OK

topdir=$PREFIX
cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *
# In each src/ directory
chmod -R o-rwx *

# Did not do because not yet sure installation is OK for users.
# chown -R cots.staff *

Intel above
   -------------------------
Gnu below

export PREFIX=/usr/local/usp/espresso/5.1.1-gnu-cc
# Use most recent modules.  Should include fftw.
source /p/cwfs/scheinin/pub/module_update/module_update_gnu.sh
module unload atp

cd $PREFIX/src
tar xzf espresso-5.1.1.tar.gz
cd espresso-5.1.1

export CC="cc"
export FC="ftn"
export F77="ftn"
export F90="ftn"
export CXX="CC"
export MPICC="cc"
export MPIF90="ftn"

export CFLAGS="-O3 -fopenmp"
export CXXFLAGS="-O3 -fopenmp"
# Note that gfortran (wrapped by ftn) does not recognize CPP macros
# unless -cpp is used.  Program iotk_base.f90 uses CPP macros.  
export FFLAGS="-O3 -fopenmp -cpp"
export FCFLAGS="-O3 -fopenmp -cpp"
export F90FLAGS="-O3 -fopenmp -cpp"

export ARCH=crayxt

# Missing tpsl for particular version of GNU being used.
module unload cray-tpsl/1.4.1

# Did not do, but a previous INSTALL note had the following.
#BLAS_LIBS=-lsci_gnu
#LAPACK_LIBS=-lsci_gnu
#SCALAPACK_LIBS=-lsci_gnu

./configure --enable-parallel --enable-openmp --with-scalapack \
 --disable-shared

Note, large configure in install/configure and if there are
configure errors, they are written to install/config.log .

Can check some configure results in  make.sys .

make all 2>&1 | tee make.log

cp -R . $PREFIX

# Testing
# Do testing using src executables rather than
# install directory $PREFIX.

mkdir $WORKDIR/tmp/espressognu
# Edit $PREFIX/src/espresso-5.1.1/environment_variables
# Note, different PREFIX in file environment_variables
PREFIX=/usr/local/usp/espresso/5.1.1-gnu-cc/src/espresso-5.1.1
BIN_DIR=$PREFIX/bin
PSEUDO_DIR=$PREFIX/pseudo
# Beware: everything in $TMP_DIR will be destroyed !
TMP_DIR=/lustre/work1/scheinin/tmp/espressognu
PARA_PREFIX="aprun -n 4"
PARA_POSTFIX=" "

export PREFIX=/usr/local/usp/espresso/5.1.1-gnu-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
# Modify check-pw.x.j around line 244 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-pw.x.j
cd CPV/tests/
# Modify check-cp.x.j around line 206 and add
for file in $files
do
  name=`basename $file .in`
  get_pp $name
done
# Will fail to run but will do download
./check-cp.x.j
qsub -l select=1:ncpus=32:mpiprocs=32,walltime=1:00:00 -A ERDCS97290STA \
 -q debug -I
export PREFIX=/usr/local/usp/espresso/5.1.1-gnu-cc
cd $PREFIX/src/espresso-5.1.1
cd PW/tests/
./check-pw.x.j
   Many tests OK, but failed at dft10
cd CPV/tests/
./check-cp.x.j
   With select=1, failed with
      Checking h2o-mt-blyp....1.apsched: claim exceeds reservation's
      nodes FAILED with error condition!
   which is strange because environment_variables appears to be
   correct and Intel case passed with select=1.  Ran OK with
   select=2 .

topdir=$PREFIX
cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *
# In each src/ directory
chmod -R o-rwx *

# Did not do because not yet sure installation is OK for users.
# chown -R cots.staff *

Gnu above

 =================== garnet above ===================

scheinin@garnet08:..usp/espresso> cat INSTALL INSTALL.gnu
# Use node other than 06
# PGI
module swap pgi/12.4.0 pgi/12.8.0
./configure ARCH=crayxt --enable-openmp --enable-parallel --with-scalapack

# edit make.sys:
    CFLAGS = -Minfo=all -Mneginfo=all -O3 -fastsse -Mipa=fast,inline $(DFLAGS) $(IFLAGS)
    F90FLAGS = -Minfo=all -Mneginfo=all -O3 -fastsse -Mipa=fast,inline \
               -Mcache_align -r8 -Mpreprocess -mp $(FDFLAGS) $(IFLAGS) $(MODFLAGS)
    FFLAGS = -Minfo=all -Mneginfo=all -O3 -fastsse -Mipa=fast,inline -r8 -mp 

make all

cd /usr/local/usp/espresso
chmod 755 x.x.x
cd x.x.x
find . -perm /u=x -exec chmod go+x {} \;
chmod -R go+r,go-w *

# To test, copy espresso/x.x.x into $WORKDIR
# Edit environment_variables for aprun (comment out second PARA_PREFIX)
# May have to run once on logins for wget to work
# cd $WORKDIR/espresso/x.x.x/PW/examples/example10
# ./run_example
# qsub -I
# cd $WORKDIR/espresso/x.x.x/PW/examples/example10
# ./run_example

 --------------------------------------------------------

If build somewhere else, a procedure for moving to PREFIX
the important stuff.

SRC=/u/scheinin/build/espresso/5.2.0-pgi
PREFIX=/usr/local/usp/espresso/5.2.0-pgi
mkdir $PREFIX/bin
cd $SRC/bin
# Check that $SRC/bin has many executables most *.x and also iotk.
cp * $PREFIX/bin

cd $SRC
cp -R pseudo $PREFIX

# Check that $SRC/Doc has symbolic links to other Doc
# directories such as INPUT_PW.xml -> ../PW/Doc/INPUT_PW.xml
cd $SRC
cp -RL Doc $PREFIX
# Make sure $PREFIX/Doc does not have dangling links.

mkdir $PREFIX/Examples
cd $SRC
eee=`find . -name example`
eee="$eee `find . -name examples`"
tar cf $PREFIX/Examples/eee.tar $eee
cd $PREFIX/Examples
tar xf eee.tar
rm eee.tar

