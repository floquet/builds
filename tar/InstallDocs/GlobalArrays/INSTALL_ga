
Build of Global Arrays

http://www.emsl.pnl.gov/docs/global/

Dec 24 2008 - Release 4.1.1 available.

On June 2, 2009 Alan Minga, Ph.D. wrote:
The correct choices for ARMCI nwtorks should be
CNL 2.0 = CRAY-SHMEM            (jade as of June 2009)
CNL 2.1 and beyond, PORTALS     (sapphire as of June 2009)

For molpro Minga gave the following advice.
(1)  Removed the "XT_SYMMETRIC_HEAP_SIZE=1G" statement from the "molpro"
script in MOLPRO bin directory.
(2)  Set the following environment variables:
export SHMEM_SWAP_BACKOFF=150
export CRAY_PORTALS_USE_BLOCKING_POLL=yes

In fact, SHMEM_SWAP_BACKOFF must be used for Global Arrays (GA),
otherwise a node can be turned into a zombie!
I asked whether "CRAY_PORTALS_USE_BLOCKING_POLL=yes" also applied
to GA and whether it applied to both CRAY-SHMEM and PORTALS.
The answer I receive was incomplete, I'll just always set it to "yes".
 > CRAY_PORTALS_USE_BLOCKING_POLL supposed to be part of the
 > portals library.  It is available for sure at ORNL and should
 > be in our latest portals builds; however, I find that for small
 > jobs I don't need to have this variable set.

Another source of ambiguity is whether these environment variables
need only be set during compiling or at run time.  In fact,
SHMEM_SWAP_BACKOFF=150 and a few others are needed at runtime.
A complete list will be shown in testing section below.

First did testing on azurite01 (sapphire-like) and onyx01 (jade-like).
Here are a few reminders about using azurite.
To login:
1. First, log on to sapphire06, jade06, or jade07.
2. Then from there, do "ssh -4 azurite01".
If you need to move files/data to azurite, you will need to do so
from jade06, jade07, or sapphire06. Use the following protocols:
1. sftp -o addressfamily=inet azurite01
2. scp -4 filename.tar azurite:.

 ----------------------------------------------------
GA  architecture-specific advice from the web page.
http://www.emsl.pnl.gov/docs/global/support.html

Cray XT3/XT4

    * Here is a sample set of ENV Settings to build GA on Cray XT3/XT4. Please
    * use appropriate settings for your environment. Contact your sys admin or
    * GA Support if you need more information.
          o If OS is CATAMOUNT on Compute Nodes
                + export TARGET=CATAMOUNT
          o If OS is Linux on Compute Nodes
                + export TARGET=LINUX64
                + (Required) export MA_USE_ARMCI_MEM=1
          o Common Settings for CNL and CATAMOUNT
                + (Required) Set Symmetric Heap Size. Some examples..
                      # export XT_SYMMETRIC_HEAP_SIZE=1G (i.e.1 GB of
                      # symmetric heap)
                      # export XT_SYMMETRIC_HEAP_SIZE=128M (i.e. 128 MB of
                      # symmetric heap)
                + export USE_MPI=y
                + export MPI_INCLUDE=$MPICH_DIR/include

    * You must select one of the network protocol
          o ARMCI_NETWORK=PORTALS (recommended)
          o ARMCI_NETWORK=CRAY-SHMEM. Do not use -VN mode due to a shmem bug.
    * Issues:
          o If GA accumulate calls are hanging or slow, please set
SHMEM_SWAP_BACKOFF variable.
                + Example: export SHMEM_SWAP_BACKOFF=100
 ----------------------------------------------------

Below, build version 4.1.1

If C++ is enabled then the core routines are compiled with C,
otherwise they are compiled with Fortran.  Though it should not
make any difference, the number of underscores in routine names
can be a problem with mixing C with Fortran.  So create libraries
both ways in order to have either available.  The cnl-2.0
hierarchies are for jade and the cnl-2.1 hierarchies are
for sapphire

tar xzf ga-4-1-1.tgz
mv ga-4-1-1 ga-4-1-1_cnl-2.0_ftn
tar xzf ga-4-1-1.tgz
mv ga-4-1-1 ga-4-1-1_cnl-2.1_ftn
tar xzf ga-4-1-1.tgz
mv ga-4-1-1 ga-4-1-1_cnl-2.0_cxx
tar xzf ga-4-1-1.tgz
mv ga-4-1-1 ga-4-1-1_cnl-2.1_cxx

export SHMEM_SWAP_BACKOFF=150
export TARGET=LINUX64
export MA_USE_ARMCI_MEM=1
# Heap size could be from 128M to 1G.
# A footnote in one manual suggests between 128M and 256M.
export XT_SYMMETRIC_HEAP_SIZE=128M
# Next line may only be needed for portals put I'm not certain,
# so set it always.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes
export USE_MPI=y
# Note that MPICH_DIR already defined by default,
# check that this is so before using it.
export MPI_INCLUDE=$MPICH_DIR/include
export MPI_LIB=$MPICH_DIR/lib

# Choose one and only one.
# For azurite and sapphire, in general CNL 2.1 and higher, use portals.
export ARMCI_NETWORK=PORTALS
# For onyx and jade, in general for CNL 2.0, use shmem.
export ARMCI_NETWORK=CRAY-SHMEM

# Use USE_MPI instead of below.
# export MSG_COMMS=MPI
# First time, there was the error message
# Cannot define MSG_COMMS and USE_MPI together
# The README in the distribution says to set USE_MPI
# whereas the manual says to set MSG_COMMS.

export FOPT="-fastsse -Mipa=fast,inline"
export COPT="-fastsse -Mipa=fast,inline"

# I don't know whether export of FOPT and COPT works,
# the installation instructions example shows these as
# being used on the gmake command line.

# The next line is for a Fortran core.
gmake FC=ftn CC=cc FOPT="$FOPT" COPT="$COPT"

# ---- Note on C++ below.
# It should be noted that this compilation of GA is
# not compatible with C++.  If C++ is needed, the core
# will be C rather than Fortran, which is imposed
# by setting

export GA_C_CORE=y

# Then CXX can be specified.

gmake FC=ftn CC=cc CXX=CC FOPT="$FOPT" COPT="$COPT"
# ---- Note on C++ above.

cd global/testing

ttt="elempatch mtest ntestc perf testc testmult ga-mpi ndim patch test testeig testsolve"

for i in $ttt ; do
make ${i}.x
done

# (patch.x failed to compiled for cxx enabled version on jade)

# For GA compiled for C++, from directory in which build was done
cd ga++/testing

ccc="testc ntestc mtest elempatch testmult"

for i in $ccc ; do
make ${i}.x
done

On sapphire makefile.h was changed to add all the Fortran libraries
(see further below) the compilation was successful and also all
the tests in ga++/testing were successful.

# Error: pgCC-Error-Unknown switch: -Mnomain
# eliminated by removing three lines from
# ../../config/makefile.h
# Error
#../../lib/LINUX64/libarmci.a(faccumulate.o)(.data+0x0): undefined reference to `pgf90_compiled'
# eliminated by changing line 1589 to
# LIBS += -L/opt/pgi/default/linux86-64/7.1-6/lib -ltcgmsg-mpi -lpgf90 -lpgftnrtl  -lpgf902 -lpghpf_mpi $(LIBMPI)
# but there are many other symbols missing.
# Basically, not practical because some routines compiled with fortran
# but then using C and in particular C++ requires being explicit about
# all Fortran libraries.

In the end, not able to create any ga++/testing executables, probably
because need to list ALL Fortran libraries.

By the way, Molpro requires TCGMSG.  Molpro does not use MPI directly
but rather uses TCGMSG.  Whereas Global Arrays recommends compiling
for MPI, Molpro recommends using tcgmsg-mpi, that is, TCGMSG implemented
with MPI.  The GA document says: To enable this mode, define the
environmental variable USE_MPI.  This was the choice made during
compilation.

Testing for either CNL 2.0 or 2.1

 qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I

Note that the environment variables set below are not just
for testing, they must be set before running any job that
uses global arrays.

# Bad things happen if SHMEM_SWAP_BACKOFF not set for the runtime.
export SHMEM_SWAP_BACKOFF=150
# The next could be changed for large problems.
export XT_SYMMETRIC_HEAP_SIZE=128M
# Maybe the following is not appropriate when SHMEM is used
# but do it anyway because the risk of crashing a node
# is too great.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes

 cd /work/scheinin/GlobalArrays/ga-4-1-1[*]/global/testing
# Also, if compiled for C++
 cd /work/scheinin/GlobalArrays/ga-4-1-1[*]/ga++/testing

# test.x stands for any executable that ends with ".x"
 aprun -n 4 ./test.x

# Also try -n 8, try all the *.x files generating in the
# compilation stage.

For test ndim.x "Testing Accumulate" error when -n 4 .
Ran OK with -n 8 .

For test testeig.x "ARMCI DASSERT fail" for C++ enabled version on
both jade and sapphire.
Also, for C++ version patch.x did not compile.

 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn
 Also, to test your GA programs, suggested compiler/linker 
 options are as follows.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.0.3/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.0.3/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm -lm
Above, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_ftn
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx
 Also, to test your GA programs, suggested compiler/linker 
 options are as follows.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.0.3/xt/mpich2-pgi/lib -L/opt/pgi/default/linux86-64/7.1-6/lib -ltcgmsg-mpi -lpgf90 -lpgftnrtl -lpgf902 -lpghpf_mpi -lsma -lm 

 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.0.3/xt/mpich2-pgi/lib -ltcgmsg-mpi -lpgf90 -lpgftnrtl -lpgf902 -lpghpf_mpi -lsma -lm

LIBS shown above is not enough.  Need many other Fortran libraries.
Something in GA was compiled with Fortran so when compiling for C++
all the Fortran libraries need to be listed explicitly.
Need to compile with ftn using the "-v" option.  Not done on jade,
but done on sapphire, see below.

Above, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn
 Also, to test your GA programs, suggested compiler/linker 
 options are as follows.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm -lm
Above, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_ftn
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx
 Also, to test your GA programs, suggested compiler/linker 
 options are as follows.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm 

After compilation is finished the following advice is printed 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm -lm
but that is not enough for ga++/testing.  Using -v when linking, it appears that the necessary libraries are the following

-L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/lib/LINUX64 \
-L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
-L/opt/mpt/3.2.0/xt/sma/lib \
-L/opt/mpt/3.2.0/xt/util/lib \
-L/opt/mpt/3.2.0/xt/pmi/lib \
-L/opt/xt-pe/2.1.56HD/lib \
-L/opt/xt-pe/2.1.56HD/lib/snos64 \
-L/opt/xt-service/2.1.56HD/lib/snos64 \
-L/opt/pgi/8.0.5/linux86-64/8.0-5/lib \
-L/usr/lib64 -L/usr/lib64/gcc/x86_64-suse-linux/4.1.2 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc

Above, /work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.0_cxx
 ============================================================ 

For C++, after compilation, in order to compile in ga++/testing
added text to file
GlobalArrays/ga-4-1-1_cnl-2.1_cxx/config/makefile.h
around line 1576

ifdef USE_MPI

   LIBS += -L/work/scheinin/GlobalArrays/ga-4-1-1_cnl-2.1_cxx/lib/LINUX64 \
-L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
-L/opt/mpt/3.2.0/xt/sma/lib \
-L/opt/mpt/3.2.0/xt/util/lib \
-L/opt/mpt/3.2.0/xt/pmi/lib \
-L/opt/xt-pe/2.1.56HD/lib \
-L/opt/xt-pe/2.1.56HD/lib/snos64 \
-L/opt/xt-service/2.1.56HD/lib/snos64 \
-L/opt/pgi/8.0.5/linux86-64/8.0-5/lib \
-L/usr/lib64 -L/usr/lib64/gcc/x86_64-suse-linux/4.1.2 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc

  ifdef GA_USE_VAMPIR

also, in same makefile.h removed (commented-out)

# ======= PGI Compilers =======
[... etc. ...]
#  ifneq (,$(findstring pgf,$(_FC)))
#     CLD_REN += -Mnomain
#  endif

 ==========================================

Documentation
http://www.emsl.pnl.gov/docs/global/

Platform-specific advice
http://www.emsl.pnl.gov/docs/global/support.html

 ============================================================ 

Below, build version 4.2

The cnl-2.0 directories are for jade,
the cnl-2.1 directories are for sapphire.

tar xzf ga-4-2.tgz
mv ga-4-2 ga-4-2_cnl-2.0_ftn
tar xzf ga-4-2.tgz
mv ga-4-2 ga-4-2_cnl-2.1_ftn
tar xzf ga-4-2.tgz
mv ga-4-2 ga-4-2_cnl-2.0_cxx
tar xzf ga-4-2.tgz
mv ga-4-2 ga-4-2_cnl-2.1_cxx

export TARGET=LINUX64
export SHMEM_SWAP_BACKOFF=150
export MA_USE_ARMCI_MEM=1
# Heap size could be from 128M to 1G.
# A footnote in one manual suggests between 128M and 256M.
export XT_SYMMETRIC_HEAP_SIZE=128M
# Next line may only be needed for portals put I'm not certain,
# so set it always.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes
export USE_MPI=y
# Note that MPICH_DIR already defined by default,
# check that this is so before using it.
export MPI_INCLUDE=$MPICH_DIR/include
export MPI_LIB=$MPICH_DIR/lib

# Choose one and only one.
# For azurite and sapphire, in general CNL 2.1 and higher, use portals.
export ARMCI_NETWORK=PORTALS
# For onyx and jade, in general for CNL 2.0, use shmem.
export ARMCI_NETWORK=CRAY-SHMEM

export FOPT="-fastsse -Mipa=fast,inline"
export COPT="-fastsse -Mipa=fast,inline"

# The next line is for a Fortran core.
gmake FC=ftn CC=cc FOPT="$FOPT" COPT="$COPT"

# For C++
export GA_C_CORE=y
export CXX=CC
gmake FC=ftn CC=cc CXX=CC FOPT="$FOPT" COPT="$COPT"

Testing
-------

Testing for either CNL 2.0 or 2.1

 qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I

For testing, need everything.

export TARGET=LINUX64
export SHMEM_SWAP_BACKOFF=150
export MA_USE_ARMCI_MEM=1
# Heap size could be from 128M to 1G.
# A footnote in one manual suggests between 128M and 256M.
export XT_SYMMETRIC_HEAP_SIZE=128M
# Next line may only be needed for portals put I'm not certain,
# so set it always.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes
export USE_MPI=y
# Note that MPICH_DIR already defined by default,
# check that this is so before using it.
export MPI_INCLUDE=$MPICH_DIR/include
export MPI_LIB=$MPICH_DIR/lib

# Choose one and only one.
# For azurite and sapphire, in general CNL 2.1 and higher, use portals.
export ARMCI_NETWORK=PORTALS
# For onyx and jade, in general for CNL 2.0, use shmem.
export ARMCI_NETWORK=CRAY-SHMEM


# For sapphire, may need
export ARMCI_DIR_NAME=armci-portals

# For jade, may need
export ARMCI_DIR_NAME=armci

Everything above, for testing.

Note that the environment variables set below are not just
for testing, they must be set before running any job that
uses global arrays.

# Bad things happen if SHMEM_SWAP_BACKOFF not set for the runtime.
export SHMEM_SWAP_BACKOFF=150
# The next could be changed for large problems.
export XT_SYMMETRIC_HEAP_SIZE=128M
# Maybe the following is not appropriate when SHMEM is used
# but do it anyway because the risk of crashing a node
# is too great.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes

# Note that global/testing applies to both the "_ftn" and the "_cxx"
# whereas ga++/testing only applies to "_cxx"
cd global/testing

ttt="elempatch mtest ntestc perf testc testmult ga-mpi ndim patch test testeig testsolve"

for i in $ttt ; do
make ${i}.x
done

run with  aprun -n 4 ./<something>.x
or  -n 8

# For GA compiled for C++, from directory in which build was done
cd ga++/testing

ccc="testc ntestc mtest elempatch testmult"

for i in $ccc ; do
make ${i}.x
done

# patch.x failed to compiled for cxx enabled version on jade.
# On sapphire, with non-cxx (ftn) it failed with double free()
# On jade, in cxx version
# global/testing/testeig.x failed with
# ARMCI DASSERT fail. armci.c:ARMCI_Error():260 cond:0
# On jade, for cxx version global/testing/ndim.x failed for
# aprun -n 4 but was successful for aprun -n 8.

On sapphire makefile.h was changed to add all the Fortran libraries
(see further below) the compilation was successful and also all
the tests in ga++/testing were successful.

For C++, after compilation, in order to compile in ga++/testing
added text to file (found with -v while compiling with ftn)
GlobalArrays/ga-4-1-1_cnl-2.1_cxx/config/makefile.h
around line 1576

ifdef USE_MPI
   LIBS += -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/lib/LINUX64 \
-L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
-L/opt/mpt/3.2.0/xt/sma/lib \
-L/opt/mpt/3.2.0/xt/util/lib \
-L/opt/mpt/3.2.0/xt/pmi/lib \
-L/opt/xt-pe/2.1.56HD/lib \
-L/opt/xt-pe/2.1.56HD/lib/snos64 \
-L/opt/xt-service/2.1.56HD/lib/snos64 \
-L/opt/pgi/8.0.5/linux86-64/8.0-5/lib \
-L/usr/lib64 -L/usr/lib64/gcc/x86_64-suse-linux/4.1.2 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc
  ifdef GA_USE_VAMPIR

ALSO, in same makefile.h removed (commented-out)

# ======= PGI Compilers =======
[... etc. ...]
#  ifneq (,$(findstring pgf,$(_FC)))
#     CLD_REN += -Mnomain
#  endif

Same as above but on jade
GlobalArrays/ga-4-1-1_cnl-2.0_cxx/config/makefile.h

ifdef USE_MPI
   LIBS += -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/lib/LINUX64 \
 -L/opt/pgi/8.0.4/linux86-64/8.0-4/lib \
 -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
 -L/opt/xt-libsci/10.3.4/pgi/lib -L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
 -L/opt/mpt/3.2.0/xt/sma/lib \
 -L/opt/mpt/3.2.0/xt/util/lib \
 -L/opt/mpt/3.2.0/xt/pmi/lib \
 -L/opt/xt-pe/2.0.49/lib/snos64 \
 -L/opt/xt-pe/2.0.49/cnos/linux/64/lib \
 -L/opt/xt-service/2.0.49/lib/snos64 \
 -L/opt/pgi/8.0.4/linux86-64/8.0-4/lib \
 -L/usr/lib64 -L/usr/lib64/gcc-lib/x86_64-suse-linux/3.3.3 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc
 ifdef GA_USE_VAMPIR
 
ALSO, in same makefile.h removed (commented-out)

# ======= PGI Compilers =======
[... etc. ...]
#  ifneq (,$(findstring pgf,$(_FC)))
#     CLD_REN += -Mnomain
#  endif


 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn
Message at end of build below.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm -lm
Message at end of build above.
Above, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_ftn
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx
Message at end of build below.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lm -lm
Message at end of build above.

But that is not enough for ga++/testing.  Using -v when compiling with Fortran,
it appears that the necessary libraries are the following.
-L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx/lib/LINUX64 \
-L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/lib \
-L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
-L/opt/mpt/3.2.0/xt/sma/lib \
-L/opt/mpt/3.2.0/xt/util/lib \
-L/opt/mpt/3.2.0/xt/pmi/lib \
-L/opt/xt-pe/2.1.56HD/lib \
-L/opt/xt-pe/2.1.56HD/lib/snos64 \
-L/opt/xt-service/2.1.56HD/lib/snos64 \
-L/opt/pgi/8.0.5/linux86-64/8.0-5/lib \
-L/usr/lib64 -L/usr/lib64/gcc/x86_64-suse-linux/4.1.2 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc

Above, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_cxx
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn
Message at end of build below.
GA libraries are built in /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm -lm

Message at end of build above.
Above, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_ftn
 ============================================================ 
Below, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx
Message at end of build below.
 GA libraries are built in /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/lib/LINUX64
 INCLUDES =  -I/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/include
 
 For Fortran Programs: 
    FLAGS = -g  -Mdalign  -i8
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm 
 
 For C Programs: 
    LIBS  = -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/lib/LINUX64 -lglobal -lma  -llinalg  -larmci -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib -ltcgmsg-mpi  -lsma -lm -lm

Message at end of build above.
But that is not enough for ga++/testing.  Using -v when compiling with Fortran,
it appears that the necessary libraries are the following.

 -L/work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx/lib/LINUX64 \
 -L/opt/pgi/8.0.4/linux86-64/8.0-4/lib \
 -L/opt/mpt/3.2.0/xt/mpich2-pgi/lib \
 -L/opt/xt-libsci/10.3.4/pgi/lib -L/opt/xt-libsci/10.3.4/pgi/snos64/lib \
 -L/opt/mpt/3.2.0/xt/sma/lib \
 -L/opt/mpt/3.2.0/xt/util/lib \
 -L/opt/mpt/3.2.0/xt/pmi/lib \
 -L/opt/xt-pe/2.0.49/lib/snos64 \
 -L/opt/xt-pe/2.0.49/cnos/linux/64/lib \
 -L/opt/xt-service/2.0.49/lib/snos64 \
 -L/opt/pgi/8.0.4/linux86-64/8.0-4/lib \
 -L/usr/lib64 -L/usr/lib64/gcc-lib/x86_64-suse-linux/3.3.3 \
 -lglobal -lma -llinalg -larmci \
 -ltcgmsg-mpi -lm \
 -lsci -lsma -lmpichf90 -lmpich -lrt \
 -lpmi -lalpslli -lalpsutil -lportals -lpthread \
 -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl -lpgftnrtl \
 -lnspgc -lpgc -lrt -lpthread -lm -lgcc -lgcc_eh -lc -lgcc -lgcc_eh -lc

Above, /work/scheinin/GlobalArrays/ga-4-2_cnl-2.0_cxx
 ============================================================ 
Below, sapphire:/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_shmem

No solution was offered as to why GA failed on jade, I suggest waiting
for an upgrade of the O/S.

The errors when testing Molpro on sapphire when GA is compiled
using portals are said not to occur for GA using shmem, though
the use of portals is recommended for CNL 2.1.
The directory ga-4-2_cnl-2.1_shmem is GA compiled on sapphire
only for the Fortran core (no C++).

export TARGET=LINUX64
export SHMEM_SWAP_BACKOFF=150
export MA_USE_ARMCI_MEM=1
# Heap size could be from 128M to 1G.
# A footnote in one manual suggests between 128M and 256M,
# or even larger.
export XT_SYMMETRIC_HEAP_SIZE=128M

# Next line may only be needed for portals put I'm not certain,
# so set it always.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes

export USE_MPI=y
# Note that MPICH_DIR already defined by default,
# check that this is so before using it.
export MPI_INCLUDE=$MPICH_DIR/include
export MPI_LIB=$MPICH_DIR/lib

export ARMCI_NETWORK=CRAY-SHMEM

export FOPT="-fastsse -Mipa=fast,inline"
export COPT="-fastsse -Mipa=fast,inline"

# The next line is for a Fortran core.
gmake FC=ftn CC=cc FOPT="$FOPT" COPT="$COPT"

# For testing.
export ARMCI_DIR_NAME=armci

cd global/testing

ttt="elempatch mtest ntestc perf testc testmult ga-mpi ndim patch test testeig testsolve"

for i in $ttt ; do
make ${i}.x
done

 qsub -A erdcssta -q debug -l ncpus=8,walltime=1:00:00 -I

Note that the environment variables set below are not just
for testing, they must be set before running any job that
uses global arrays.

# Bad things happen if SHMEM_SWAP_BACKOFF not set for the runtime.
export SHMEM_SWAP_BACKOFF=150
export XT_SYMMETRIC_HEAP_SIZE=512M
# Maybe the following is not appropriate when SHMEM is used
# but do it anyway because the risk of crashing a node
# is too great.
export CRAY_PORTALS_USE_BLOCKING_POLL=yes

export ARMCI_NETWORK=CRAY-SHMEM
export ARMCI_DIR_NAME=armci

export USE_MPI=y
# Note that MPICH_DIR already defined by default,
# check that this is so before using it.
export MPI_INCLUDE=$MPICH_DIR/include
export MPI_LIB=$MPICH_DIR/lib

cd global/testing/

run with  aprun -n 4 ./<something>.x
or  -n 8

Above, sapphire:/work/scheinin/GlobalArrays/ga-4-2_cnl-2.1_shmem

