
Scalasca on an SGI.
This is for phoenix.  Installing on topaz for COST should be similar.

Source
http://www.scalasca.org/software/scalasca-2.x/
Links to prerequisites can be found in
http://www.scalasca.org/software/scalasca-2.x/requirements.html
Installation instructions can be found in
http://www.scalasca.org/software/scalasca-2.x/documentation.html

The "Software" tab and subpage "Download" has --
in addition to the base sofware -- a link to
build requirements.  The developers write:
      Note that neither Score-P nor the CUBE4 GUI are included
      in the Scalasca distribution tarball but have to be
      downloaded and installed separately. See the build
      requirements page for download links.

The requirements page has more information and links
to the recommended and required software.

Recommended libraries/packages
The following packages are not strictly necessary for
 building Scalasca v2, but are strongly recommended
 to make effective use of Scalasca:

    Score-P v1.2
    Scalasca v2 is based on the community instrumentation
 and measurement infrastructure Score-P. To generate event
 traces for Scalasca to analyze, a working installation
 of Score-P is therefore required.
 http://www.vi-hps.org/projects/score-p/ download pages
 lists version of OTF2, CUBE4 and OPARI2 with which it is compatible.
 Note that Score-P lists OPARI2 as a prerequisite, but Scalasca
 does not.

    CUBE4 library v4.2
    The Scalasca v2 distribution package only includes the core
   writer part of the CUBE4 library.  Therefore, a separate full
  installation including reader/writer libraries,
  GUI, and command-line tools is recommended.

Optional libraries

    OTF2 library v1.2
    Although the Scalasca v2 distribution tarball comes
  with a recent version of the OTF2 library included,
  it might be desired to use a separate installation
 instead (e.g., to "share" with the Score-P measurement system).

    zlib library v1.2.3 or newer
    The zlib library is only needed if backwards compatibility
 support for compressed trace files written in EPILOG format
 (generated by Scalasca v1) is desired.
 In cross-compiling environments, zlib has to be compiled for
 the compute nodes (i.e., backend).

Did not build SIONlib.
    SIONlib library v1.3p5 or newer
    The SIONlib library is only needed if the included OTF2
    library included shall be configured to support SIONlib
    container files for storing trace data.

Will use the default
compiler/intel/15.0.2  and  mpi/sgimpt/2.11
Compile with mpicc, mpif90 and mpicxx.
For non-MPI, icc, ifort and icpc.
Do not launch with mpirun, but rather, mpiexec_mpt.
For a batch job on phoenix, set environment using the following.
source /usr/share/Modules/init/bash
module load compiler/intel/15.0.2
module load mpi/sgimpt/2.11

If COST_HOME is not defined, define it.
On phoenix, testing installation in my HOME directory.
export COST_HOME=/home/scheinin/apps

Some RPMs that were needed.
Important to have qt-devel.
qt-devel-4.6.2-28.el6_5.x86_64
qt-sqlite-4.6.2-28.el6_5.x86_64
qt3-3.3.8b-30.el6.x86_64
qt-x11-4.6.2-28.el6_5.x86_64
qt-doc-4.6.2-28.el6_5.noarch
qt3-devel-3.3.8b-30.el6.x86_64
qt-4.6.2-28.el6_5.x86_64
Important to have javac, found in java-1.8.0-openjdk-devel
java_cup-0.10k-5.el6.x86_64
java-1.5.0-gcj-1.5.0.0-29.1.el6.x86_64
java-1.8.0-openjdk-headless-1.8.0.45-28.b13.el6_6.x86_64
java-1.8.0-openjdk-1.8.0.45-28.b13.el6_6.x86_64
java-1.8.0-openjdk-devel-1.8.0.45-28.b13.el6_6.x86_64
XML parser
xerces-j2-2.7.1-12.7.el6_5.x86_64

 ---------------- Below, communication with scalasca group. ----------------

People at FZ Juelich
Dr. Pavel Saviankou   p.saviankou@fz-juelich.de
Christian Feld        c.feld@fz-juelich.de
Markus Geimer         m.geimer@fz-juelich.de
Group                 scalasca@fz-juelich.de
Juelich Supercomputing Centre
Institute for Advanced Simulation
Forschungszentrum Juelich GmbH
52425 Juelich, Germany
WWW:    http://www.fz-juelich.de/jsc

Pavel wrote:
If you encounter some problems during configure step, please send me
build-backend/config.log  file.
If you encounter some problem during make step, please send me the
output of "make" step.

Suggestion by Pavel:

mkdir vpath
cd vpath
../configure --prefix=<wheretoinstall>
- --with-nocross-compiler-suite=intel --with-qt-specs=linux-icc-64
- --disable-silent-rules
make
make install

Please note that Cube doesn't use MPI library. These variables are
presend due to the fact that Cube and Score-P share partly the build
system configuration files. In case of Cube MPIxxx variables are not
relevant.

For Score-P, one suggestion by Christian
./configure [...] --with-mpi=sgimpt --with-nocross-compiler-suite=intel

Markus wrote:

Intel is very compatible with GNU. That is, you can compile the entire
tool suite with Intel compilers and link against a GNU-built Qt. It
probably won't work the other way around, but this combination is
safe.

We require at least Qt version 4.6.0 (configure check and used API)

 ---------------- Above, communication with scalasca group. ----------------

  =========== CUBE4 on phoenix, below ===========

# Use default
# compiler/intel/15.0.2  and  mpi/sgimpt/2.11

export COST_HOME=/home/scheinin/apps
export PREFIX=${COST_HOME}/scalasca-2.0-intel

# Documentation on how to build non-GNU compilers is very weak
# and ambiguous.

# On phoenix02 QTDIR QTINC QTLIB are defined as environment
# variables but they are defined at Qt3.
export QTDIR=/usr/lib64/qt4
export QTINC=/usr/include/Qt
export QTLIB=/usr/lib64

# Load option "-no-ipo" is needed for ifort on phoenix.
export CPPFLAGS_FOR_BUILD="-I$QTINC"
export CC_FOR_BUILD=icc
export CXX_FOR_BUILD=icpc
export F77_FOR_BUILD=ifort
export FC_FOR_BUILD=ifort
export FFLAGS_FOR_BUILD="-no-ipo"
export FCFLAGS_FOR_BUILD="-no-ipo"
export LDFLAGS_FOR_BUILD="-no-ipo -L$QTLIB"
export CPPFLAGS="-I$QTINC"
export CC=mpicc
export CXX=mpicxx
export F77=mpif90
export FC=mpif90
export LDFLAGS="-no-ipo -L$QTLIB"
export FFLAGS="-no-ipo"
export FCFLAGS="-no-ipo"
export MPICC="mpicc"
export MPICXX="mpicxx"
export MPIF77="mpif77"
export MPIFC="mpif90"
export MPI_CPPFLAGS="-DMPICH_SKIP_MPICXX -I${MPI_ROOT}/include"
export MPI_LDFLAGS="-no-ipo -L${MPI_ROOT}/lib"
export PATH=${QTDIR}/bin:$PATH

# Below, the following files are probably not needed.
# Created these while experimenting on how to configure CUBE.

# File platform-frontend-user-provided
CC_FOR_BUILD=/usr/bin/icc
CXX_FOR_BUILD=/usr/bin/icpc
F77_FOR_BUILD=/usr/bin/ifort
FC_FOR_BUILD=/usr/bin/ifort

CPPFLAGS_FOR_BUILD=
CFLAGS_FOR_BUILD=
CXXFLAGS_FOR_BUILD=
FFLAGS_FOR_BUILD=
FCFLAGS_FOR_BUILD=
LDFLAGS_FOR_BUILD="-no-ipo"
LIBS_FOR_BUILD=

# File platform-backend-user-provided
CC=mpicc
CXX=mpicxx
F77=mpif90
FC=mpif90
LDFLAGS="-no-ipo"

# File platform-shmem-user-provided
CC=mpicc
CXX=mpicxx
F77=mpif90
FC=mpif90
LDFLAGS="-no-ipo"

# File platform-mpi-user-provided
MPICC="mpicc"
MPICXX="mpicxx"
MPIF77="mpif77"
MPIFC="mpif90"
MPI_CPPFLAGS="-DMPICH_SKIP_MPICXX"
MPI_LDFLAGS="-no-ipo"

# cube-4.3.1/vendor/common/build-config/platforms
# compiler-mpi-intel3 has these notes:
# # Scalasca1 settings
# MPILIB    =
# PMPILIB   =
# FMPILIB   = -lepk.ad.fmpi
# FMPIOBJ   = libepk.ad.fmpi.a
# MPIEXTRA  = -DMPICH_IGNORE_CXX_SEEK -DHAS_MPI2_1SIDED

# Above, the following files are probably not needed.

# Documentation on how to build non-GNU compilers is very weak
# and ambiguous.

# Note, Cube GUI requires an installed copy of the Qt development kit.
# Requires at least Qt version 4.6.0

cd cube-4.3.1
mkdir build-intel
cd build-intel
# --with-mpi=sgimpt might only be needed for Score-P
../configure --prefix=$PREFIX \
  --with-mpi=sgimpt \
  --with-nocross-compiler-suite=intel \
  --disable-silent-rules \
  --with-cubelib --with-tools \
  --with-cwriter --with-java-reader \
  --with-qt=$QTDIR \
  --with-qt-specs=${QTDIR}/mkspecs/linux-icc-64 \
  --enable-static --enable-shared

make 2>&1 | tee make.log
make check 2>&1 | tee check.log

echo $PREFIX
ls $PREFIX
make install

ldconfig: Cannot mmap file /home/scheinin/apps/scalasca-2.0-intel/lib/libcubewriter4.so.7.0.1.
and other similar errors

Some linking is done in response to "make install".

ls $PREFIX
# and look around bin, lib, etc.

  =========== CUBE4 on phoenix, above ===========
  =========== OTF2 on phoenix, below ===========

Use same environment variables and modules as CUBE4 above.

cd otf2-1.2.1

# Did not use --with-sionlib , do not have sionlib already built.

./configure --prefix=$PREFIX \
 --with-nocross-compiler-suite=intel \
 --enable-static --enable-shared

make 2>&1 | tee make.log

ipo: error #11093: Failed to memory map: ./.libs/libutils.a for whole_archive processing.
ipo: error #11093: Failed to memory map: ./.libs/libjenkins_hash.a for whole_archive processing.

make check 2>&1 | tee check.log
make install

Unlike garnet, there is no subdirectory lib/backend .

  =========== OTF2 on phoenix, above ===========
  =========== OPARI2 on phoenix, below ===========

Use same environment variables and modules as CUBE4 above.

cd opari2-1.1.3

./configure --prefix=$PREFIX \
  --with-nocross-compiler-suite=intel \
  --enable-static --enable-shared

make 2>&1 | tee make.log
make check 2>&1 | tee check.log
make install

  =========== OPARI2 on phoenix, above ===========
  =========== Score-P on phoenix, below ===========

Use same environment variables and modules as CUBE4 above.

For papi there is
/usr/lib64/libpapi.so.4.1.3.0
/usr/lib64/papi-5.1.1/usr/lib/libpapi.so.5.1.1.0

# get information on options using
./configure --help=recursive

# To use what has already been installed, in particular, CUBE.
export PATH=${PATH}:${PREFIX}/bin
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PREFIX}/lib

# phoenix has papi-5.1.1-5.el6.x86_64 but not the devel
# package
# export PAPI_INC=/opt/cray/papi/5.3.0/include 
# export PAPI_LIB=/opt/cray/papi/5.3.0/bin
  --with-papi-header=<path-to-papi.h>
                          If papi.h is not installed in the default location,
                          specify the dirname where it can be found.
  --with-papi-lib=<path-to-libpapi.*>
                          If libpapi.* is not installed in the default
                          location, specify the dirname where it can be found.
# On garnet but not on phoenix
  --with-pdt=/usr/local/usp/COST/pdt-3.15/x86_64/bin
  --with-pdt=<path-to-binaries>
                          Specifies the path to the program database toolkit
                          (PDT) binaries, e.g., cparse.
# Note that PDT contains EDG C and C++ parsers, and IL analyzers
# that use EDG code. The EDG software in PDT may not be downloaded,
# distributed or used in violation of the United States export
# control laws and regulations. 

# For topaz, might be useful to request papi-devel or whatever RPM

./configure --prefix=$PREFIX \
  --with-cube=${PREFIX}/bin \
  --with-otf2=${PREFIX}/bin \
  --with-opari2=${PREFIX}/bin \
  --with-mpi=sgimpt \
  --with-shmem=no \
  --with-nocross-compiler-suite=intel \
  --enable-shared --enable-static

# maybe try later
#  --disable-shmem \

# On phoenix, only OpenMPI has shmem.
# The option
#  --with-shmem=sgimpt
# does not work.
# Looking at the configure file, I do not see test for
# --disable-shmem .  The use of --with-shmem=no worked to
# prevent configure from halting when shmem was not available.

Even though MPIFC is defined as an environment variable
configure calling configure for build-gcc-plugin will set it to gfortran,
unless --with-nocross-compiler-suite=intel is used.  Also, MPIFC
is set to ifort even though the value as an environment variable is
export MPIFC="mpif90"  Same is true for configure calling configure
for build-mpi.

# Note that final figuration shows
#     PDT MPI instrumentation:    yes

# (On garnet I did not use
#  --with-otf2=${PREFIX}/bin
#  because I did not notice it in the long ./configure --help=recursive
#  output, nonetheless otf2-config was found because it was in PATH.)

phoenix below, configure output

Configure command:
  ./configure                   '--prefix=/home/scheinin/apps/scalasca-2.0-intel' \
                                '--with-cube=/home/scheinin/apps/scalasca-2.0-intel/bin' \
                                '--with-otf2=/home/scheinin/apps/scalasca-2.0-intel/bin' \
                                '--with-opari2=/home/scheinin/apps/scalasca-2.0-intel/bin' \
                                '--with-mpi=sgimpt' \
                                '--with-shmem=no' \
                                '--with-nocross-compiler-suite=intel' \
                                '--enable-shared' \
                                '--enable-static'

Configuration summary:
  Score-P
    Platform:                   linux (auto detected)
    Cross compiling:            no (auto detected)
    Machine name:               Linux
    otf2 support:               yes, using external via /home/scheinin/apps/scalasca-2.0-intel/bin/otf2-config
    opari2 support:             yes, using external via /home/scheinin/apps/scalasca-2.0-intel/bin/opari2-config
    cube support:               yes, using external via /home/scheinin/apps/scalasca-2.0-intel/bin/cube-config
    SHMEM support:              no, explicitly disabled via --without-shmem

  Score-P (backend):
    C99 compiler used:          icc -std=gnu99
    Pthread support:            yes, using icc -std=gnu99 -pthread 
    PAPI support:               no
    getrusage support:          yes
    RUSAGE_THREAD support:      yes, using -D_GNU_SOURCE
    dlfcn support:              yes, using -ldl
    libOpenCL support:          no
    OpenCL support:             no
    OTF2 with SIONlib support:  no
    OTF2 with zlib support:     no
    libcudart support:          no
    libcuda support:            no
    libcupti support:           no
    CUDA support:               no, see also libcudart, libcuda, and libcupti support
    CUPTI async support:        no
    CUDA version >= 6.0:        no
    libpmi support:             no
    librca support:             no
    Cray PMI support:           no
    OpenMP support:             yes, using -fopenmp
    OpenMP pomp_tpd:            yes
    OpenMP ancestry:            yes
    PDT support:                no
    Cobi support:               no
    Clock used for measurement: clock_gettime, using CLOCK_MONOTONIC_RAW -lrt
    compiler instrumentation:   yes
    Online access support:      yes

  Score-P (GCC plug-in):
    GCC plug-in support:        no, only GNU compilers supported

  Score-P (MPI backend):
    MPI support for C:          yes
    C99 compiler used for MPI:  icc -std=gnu99
    MPI support C++:            yes
    C++ compiler used for MPI:  icpc
    MPI support F77:            yes
    F77 compiler used for MPI:  ifort
    MPI support F90:            yes
    F90 compiler used for MPI:  ifort
    Library used for MPI:       -lmpi
    PAPI support:               no
    getrusage support:          yes
    RUSAGE_THREAD support:      yes, using -D_GNU_SOURCE
    dlfcn support:              yes, using -ldl
    libOpenCL support:          no
    OpenCL support:             no
    libcudart support:          no
    libcuda support:            no
    libcupti support:           no
    CUDA support:               no, see also libcudart, libcuda, and libcupti support
    CUPTI async support:        no
    CUDA version >= 6.0:        no
    libpmi support:             no
    librca support:             no
    Cray PMI support:           no
    OpenMP support:             yes, using -fopenmp
    OpenMP pomp_tpd:            yes
    OpenMP ancestry:            yes
    PDT MPI instrumentation:    yes
    compiler instrumentation:   yes
    Online access support:      yes

  Score-P (score):
    cube reader support:        yes, using -I/home/scheinin/apps/scalasca-2.0-intel/include/cube  -L/home/scheinin/apps/scalasca-2.0-intel/lib/ -lcube4 -lz  -lcube4 -lz 

phoenix above, configure output

make 2>&1 | tee make.log

ipo: error #11093: Failed to memory map: ./.libs/libscorep_adapter_mpi_mgmt_fortran_sub1.a for whole_archive processing.
and other similar lines

../src/adapters/mpi/SCOREP_Mpi_P2p.c(2211): warning #147: declaration is incompatible with "int MPI_Test_cancelled(MPI_Status *, int *)" (declared at line 446 of "/opt/sgi/mpt/mpt-2.11/include/mpi.h")
  MPI_Test_cancelled( SCOREP_MPI_CONST_DECL MPI_Status* status, int* flag )
  ^

make check 2>&1 | tee check.log

# Some test files have mpirun, none have mpiexec_mpt .
# Tests compiled but nothing run.

make install

ldconfig: Cannot mmap file /home/scheinin/apps/scalasca-2.0-intel/lib/libscorep_adapter_mpi_mgmt.so.
ipo: error #11093: Failed to memory map: ./.libs/libjenkins_hash.a for whole_archive processing.
and similar errors.
It looks like linking was done during installation.

  =========== Score-P on phoenix, above ===========
  =========== Scalasca on phoenix, below ===========

Use same environment variables and modules as CUBE4 above.

# To use what has already been installed.
export PATH=${PATH}:${PREFIX}/bin
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PREFIX}/lib

# get information on options using
./configure --help=recursive

untar and cd scalasca-2.0

./configure --prefix=$PREFIX \
  --with-cube=${PREFIX}/bin \
  --with-otf2=${PREFIX}/bin \
  --with-mpi=sgimpt \
  --with-nocross-compiler-suite=intel \
  --enable-shared --enable-static

# On garnet
# # Building the software insists on using the dynamic library
# # version of zlib compiled for the backend (the compute nodes)
# export LIBZ_INCLUDE=/usr/local/usp/COST/zlib-1.2.8-gnu/include
# export LIBZ_LIB=/usr/local/usp/COST/zlib-1.2.8-gnu/libso
# I mention this just in case something similar is needed for topaz.

configure output on phoenix, below

Configure command:
  ./configure                   '--prefix=/home/scheinin/apps/scalasca-2.0-intel' \
                                '--with-cube=/home/scheinin/apps/scalasca-2.0-intel/bin' \
                                '--with-otf2=/home/scheinin/apps/scalasca-2.0-intel/bin' \
                                '--with-mpi=sgimpt' \
                                '--with-nocross-compiler-suite=intel' \
                                '--enable-shared' \
                                '--enable-static'

Configuration summary:
  Scalasca 2.2.1:
    Platform:                   linux (auto detected)
    Cross compiling:            no (auto detected)
    MIC target support:         no
    otf2 support:               yes, using external via /home/scheinin/apps/scalasca-2.0-intel/bin/otf2-config
    epilog support:             yes, using internal
    cube support:               yes, using external via /home/scheinin/apps/scalasca-2.0-intel/bin/cube-config

  Scalasca (backend):
    MIC target support:         no
    libiberty support:          not required
    libz support:               yes, using -lz
    C99 compiler used:          icc -std=gnu99
    C++ compiler used:          icpc
    OpenMP support:             yes, using -fopenmp

  Scalasca (MPI backend):
    MIC target support:         no
    MPI support:                yes
    C++ compiler used for MPI:  icpc
    Library used for MPI:        
    OpenMP support:             yes, using -fopenmp

configure output on phoenix, above

make 2>&1 | tee make.log

make check 2>&1 | tee check.log

make install

Some errors such as
ldconfig: Cannot mmap file /home/scheinin/apps/scalasca-2.0-intel/lib/libscorep_mutex_pthread.so.

 -----------------------

topdir=$PREFIX

cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# For src directory chmod -R o-rwx *

  =========== Scalasca on phoenix, above ===========


