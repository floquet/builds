
June 4, 2015

Use native gcc in /usr/bin/

export CC=gcc
export CFLAGS="-fPIC"
export LIBS="-lgssapi_krb5 -lkrb5 -lcom_err -lk5crypto"
export LDFLAGS="-L/usr/local/krb5/lib"
export PKG_CONFIG_PATH=/usr/local/krb5/openssl/lib/pkgconfig
# configure uses krb5-config which is in /usr/local/krb5/bin
export PATH=/usr/local/krb5/bin:$PATH

# On garnet, when I did not build my own curl,
# ran hundreds of tests, seemed OK; however,
# when using this git, no download happened.
# No error message but stopped before downloading.
# So, build my own curl.

export PREFIX=/p/home/apps/unsupported/git/2.4.3-gcc43
mkdir $PREFIX
cd /p/home/scheinin/build/git/src
wget http://curl.haxx.se/download/curl-7.42.1.tar.bz2
tar xjf curl-7.42.1.tar.bz2
cd curl-7.42.1

export LD_LIBRARY_PATH=/usr/local/krb5/lib:/usr/local/krb5/openssl/lib:$LD_LIBRARY_PATH
export GSSAPI_LIB_DIR=/usr/local/krb5/lib 

# Problem is that "configure" links with "-lgssapi"
# when it should use -lgssapi_krb5 .
# Even having --with-gssapi-libs=/usr/local/krb5/lib and 
# export GSSAPI_LIB_DIR=/usr/local/krb5/lib
# the configure script defines GSSAPI_LIB_DIR as -L/usr/local/krb5/lib
# so test fails.
Change file "configure"
 from
#  elif test -z "$GSSAPI_LIB_DIR"; then
 to
   elif test 1 == 1 ; then

so the the following is used
     *)
        if test -f "$GSSAPI_ROOT/bin/krb5-config"; then

# used option   --disable-shared  because
# tries to make libcurl.so but cannot because /usr/local/krb5/lib
# does not have libgssapi_krb5.so ( -> libgssapi_krb5.so.2.2 on garnet),
# only libgssapi_krb5.a

./configure --prefix=$PREFIX \
   --with-ssl=/usr/local/krb5/openssl \
   --enable-crypto-auth  --enable-http \
   --enable-static  --disable-shared \
   --with-gssapi=/usr/local/krb5 \
   --with-gssapi-includes=/usr/local/krb5/include \
   --with-gssapi-libs=/usr/local/krb5/lib \
    2>&1  | tee run_configure.log

make 2>&1 | tee make.log
make -k check 2>&1 | tee check.log
# Almost all successful.  Failed to start HTTP3 server.
make install


cd /p/home/scheinin/build/git/src
cd /usr/local/usp/git/1.9.4-gnu/src
 wget --no-check-certificate https://www.kernel.org/pub/software/scm/git/git-2.4.3.tar.gz
tar xzf git-2.4.3.tar.gz
cd git-2.4.3

export PREFIX=/p/home/apps/unsupported/git/2.4.3-gcc43
export CC=gcc
export CFLAGS="-fPIC"
# See $PREFIX/lib/pkgconfig/libcurl.pc for list, e.g.
# -ldl -lresolv -lz -lrt"
export LIBS="-lgssapi_krb5 -lkrb5 -lcom_err -lk5crypto -lssl -lcrypto -ldl -lresolv -lz -lrt"
export LDFLAGS="-L/usr/local/krb5/lib -L/usr/local/krb5/openssl/lib -L$PREFIX/lib"
export PKG_CONFIG_PATH=/usr/krb5/openssl/lib/pkgconfig:$PREFIX/lib/pkgconfig
export PATH=$PREFIX/bin:/usr/local/krb5/bin:$PATH

./configure --prefix=$PREFIX \
   --with-openssl=/usr/local/krb5/openssl \
   --with-curl=$PREFIX  --with-expat \
    2>&1  | tee run_configure.log

# Check that
# checking for curl_global_init in -lcurl... yes

Edit Makefile, add "V=1"
Also, after CURL_LIBCURL is defined, add what it depends on
       CURL_LIBCURL += -lgssapi_krb5 -lkrb5 -lcom_err -lk5crypto -lssl -lcrypto -ldl -lresolv -lz -lrt

make 2>&1 | tee make.log

make -k test 2>&1 | tee check.log
# Testing took a long time.  Results:
# fixed   0
# success 12157
# failed  0
# broken  173
# total   12461

make install

Put into README, below.

Can put git executable in PATH using

sh, bash, ksh

export PATH=/p/home/apps/unsupported/git/2.4.3-gcc43/bin:$PATH

csh, tcsh

setenv PATH /p/home/apps/unsupported/git/2.4.3-gcc43/bin:$PATH

If there is the error
fatal: unable to access 'https:<some directory>': SSL certificate problem: unable to get local issuer certificate

Solution is to set an environment variable

sh, bash, ksh

export GIT_SSL_NO_VERIFY=true

csh, tcsh

setenv GIT_SSL_NO_VERIFY true

Put into README, above.

topdir=$PREFIX
cd $topdir
chmod ugo+xr $topdir
find . -perm /u=x -exec chmod ugo+x {} \;
chmod -R ugo+r *
# Use g+w so that other members of the staff can modify.
chmod -R g+w,o-w *

# An actual test of usage
export PATH=/p/home/apps/unsupported/git/2.4.3-gcc43/bin:$PATH
cd $HOME/testgit/
git clone git://github.com/SU-SWS/open_framework.git
export GIT_SSL_NO_VERIFY=true
git clone https://github.com/libgit2/libgit2
